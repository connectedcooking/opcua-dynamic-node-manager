// Generated by Prosys OPC UA Java SDK Codegen
//
package com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.di.objecttypes.server;

import com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.di.objecttypes.PackageLoadingType;
import com.prosysopc.ua.StatusException;
import com.prosysopc.ua.TypeDefinitionId;
import com.prosysopc.ua.nodes.Mandatory;
import com.prosysopc.ua.nodes.Optional;
import com.prosysopc.ua.nodes.UaNode;
import com.prosysopc.ua.nodes.UaProperty;
import com.prosysopc.ua.nodes.UaVariable;
import com.prosysopc.ua.server.GeneratedNodeInitializer;
import com.prosysopc.ua.server.ServiceContext;
import com.prosysopc.ua.stack.builtintypes.DiagnosticInfo;
import com.prosysopc.ua.stack.builtintypes.LocalizedText;
import com.prosysopc.ua.stack.builtintypes.NodeId;
import com.prosysopc.ua.stack.builtintypes.QualifiedName;
import com.prosysopc.ua.stack.builtintypes.StatusCode;
import com.prosysopc.ua.stack.builtintypes.UnsignedInteger;
import com.prosysopc.ua.stack.builtintypes.Variant;
import com.prosysopc.ua.types.opcua.server.BaseDataVariableTypeNode;
import com.prosysopc.ua.types.opcua.server.TemporaryFileTransferTypeNode;
import java.lang.Object;
import java.lang.Override;
import java.lang.RuntimeException;

/**
 * Generated on 2025-04-16 18:27:23
 */
@TypeDefinitionId("nsu=http://opcfoundation.org/UA/DI/;i=137")
public abstract class PackageLoadingTypeNodeBase extends SoftwareLoadingTypeNode implements PackageLoadingType {
  private static GeneratedNodeInitializer<PackageLoadingTypeNode> f_packageLoadingTypeNodeInitializer;

  protected PackageLoadingTypeNodeBase(Parameters parameters) {
    super(parameters);
  }

  @Override
  public void afterCreate() {
    super.afterCreate();

    // Call afterCreate for each sub-node (if the node has any)
    callAfterCreateIfExists(getErrorMessageNode());
    callAfterCreateIfExists(getCurrentVersionNode());
    callAfterCreateIfExists(getFileTransferNode());
    GeneratedNodeInitializer<PackageLoadingTypeNode> impl = getPackageLoadingTypeNodeInitializer();
    if(impl != null) {
      impl.init((PackageLoadingTypeNode)this);
    }
  }

  public static GeneratedNodeInitializer<PackageLoadingTypeNode> getPackageLoadingTypeNodeInitializer() {
    return f_packageLoadingTypeNodeInitializer;
  }

  public static void setPackageLoadingTypeNodeInitializer(GeneratedNodeInitializer<PackageLoadingTypeNode> f_packageLoadingTypeNodeInitializerNewValue) {
    f_packageLoadingTypeNodeInitializer=f_packageLoadingTypeNodeInitializerNewValue;
  }

  @Optional
  @Override
  public UaProperty getWriteBlockSizeNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/DI/", "WriteBlockSize");
    return getProperty(browseName);
  }

  @Optional
  @Override
  public UnsignedInteger getWriteBlockSize() {
    UaVariable node = getWriteBlockSizeNode();
    if (node == null) {
      return null;
    }
    Object value = node.getValue().getValue().getValue();
    return (UnsignedInteger) value;
  }

  @Optional
  @Override
  public void setWriteBlockSize(UnsignedInteger value) {
    UaVariable node = getWriteBlockSizeNode();
    if (node == null) {
      throw new RuntimeException("Setting WriteBlockSize failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting WriteBlockSize failed unexpectedly", e);
    }
  }

  public void setWriteBlockSize(long value) {
    setWriteBlockSize(UnsignedInteger.valueOf(value));
  }

  @Mandatory
  @Override
  public BaseDataVariableTypeNode getErrorMessageNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/DI/", "ErrorMessage");
    return (BaseDataVariableTypeNode) getComponent(browseName);
  }

  @Mandatory
  @Override
  public LocalizedText getErrorMessage() {
    UaVariable node = getErrorMessageNode();
    if (node == null) {
      throw new RuntimeException("Mandatory node ErrorMessage does not exist");
    }
    Object value = node.getValue().getValue().getValue();
    return (LocalizedText) value;
  }

  @Mandatory
  @Override
  public void setErrorMessage(LocalizedText value) {
    UaVariable node = getErrorMessageNode();
    if (node == null) {
      throw new RuntimeException("Setting ErrorMessage failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting ErrorMessage failed unexpectedly", e);
    }
  }

  @Mandatory
  @Override
  public SoftwareVersionTypeNode getCurrentVersionNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/DI/", "CurrentVersion");
    return (SoftwareVersionTypeNode) getComponent(browseName);
  }

  @Mandatory
  @Override
  public TemporaryFileTransferTypeNode getFileTransferNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/DI/", "FileTransfer");
    return (TemporaryFileTransferTypeNode) getComponent(browseName);
  }

  @Override
  public Variant[] callMethod(ServiceContext serviceContext, NodeId methodId,
      Variant[] inputArguments, StatusCode[] inputArgumentResults,
      DiagnosticInfo[] inputArgumentDiagnosticInfos) throws StatusException {
    return super.callMethod(serviceContext, methodId, inputArguments, inputArgumentResults, inputArgumentDiagnosticInfos);
  }
}
