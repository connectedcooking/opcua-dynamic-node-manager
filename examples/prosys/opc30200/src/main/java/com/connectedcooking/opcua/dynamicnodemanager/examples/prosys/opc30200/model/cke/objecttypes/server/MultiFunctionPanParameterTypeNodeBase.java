// Generated by Prosys OPC UA Java SDK Codegen
//
package com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.cke.objecttypes.server;

import com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.cke.datatypes.MultiFunctionPanModeEnumeration;
import com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.cke.datatypes.SpecialFunctionModeEnumeration;
import com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.cke.objecttypes.MultiFunctionPanParameterType;
import com.prosysopc.ua.StatusException;
import com.prosysopc.ua.TypeDefinitionId;
import com.prosysopc.ua.nodes.Mandatory;
import com.prosysopc.ua.nodes.Optional;
import com.prosysopc.ua.nodes.UaNode;
import com.prosysopc.ua.nodes.UaVariable;
import com.prosysopc.ua.server.GeneratedNodeInitializer;
import com.prosysopc.ua.server.ServiceContext;
import com.prosysopc.ua.stack.builtintypes.DiagnosticInfo;
import com.prosysopc.ua.stack.builtintypes.ExpandedNodeId;
import com.prosysopc.ua.stack.builtintypes.NodeId;
import com.prosysopc.ua.stack.builtintypes.QualifiedName;
import com.prosysopc.ua.stack.builtintypes.StatusCode;
import com.prosysopc.ua.stack.builtintypes.Variant;
import com.prosysopc.ua.types.opcua.AnalogItemType;
import com.prosysopc.ua.types.opcua.server.AnalogItemTypeNode;
import com.prosysopc.ua.types.opcua.server.BaseDataVariableTypeNode;
import java.lang.Boolean;
import java.lang.Float;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.RuntimeException;
import java.util.List;

/**
 * Generated on 2024-09-09 10:35:47
 */
@TypeDefinitionId("nsu=http://opcfoundation.org/UA/CommercialKitchenEquipment/;i=1018")
public abstract class MultiFunctionPanParameterTypeNodeBase extends KitchenDeviceParameterTypeNode implements MultiFunctionPanParameterType {
  private static GeneratedNodeInitializer<MultiFunctionPanParameterTypeNode> f_multiFunctionPanParameterTypeNodeInitializer;

  protected MultiFunctionPanParameterTypeNodeBase(UaNode.Parameters parameters) {
    super(parameters);
  }

  @Override
  public void afterCreate() {
    super.afterCreate();

    // Call afterCreate for each sub-node (if the node has any)
    callAfterCreateIfExists(getActualCoreTemperatureNode());
    callAfterCreateIfExists(getActualPressureAbsoluteNode());
    callAfterCreateIfExists(getActualTemperatureBottomNode());
    callAfterCreateIfExists(getActualTemperatureCupNode());
    callAfterCreateIfExists(getCookingLevelNode());
    callAfterCreateIfExists(getIsLidLockedNode());
    callAfterCreateIfExists(getIsLidOpenNode());
    callAfterCreateIfExists(getIsWithCleaningNode());
    callAfterCreateIfExists(getIsWithLiftNode());
    callAfterCreateIfExists(getIsWithPressureNode());
    callAfterCreateIfExists(getIsWithTiltingNode());
    callAfterCreateIfExists(getMultiFunctionPanModeNode());
    callAfterCreateIfExists(getSetCoreTemperatureNode());
    callAfterCreateIfExists(getSetProcessTimeProgramNode());
    callAfterCreateIfExists(getSetProcessTimeStepNode());
    callAfterCreateIfExists(getSetTemperatureNode());
    callAfterCreateIfExists(getSpecialFunctionModeNode());
    callAfterCreateIfExists(getTimeRemainingProgramNode());
    callAfterCreateIfExists(getTimeRemainingStepNode());
    GeneratedNodeInitializer<MultiFunctionPanParameterTypeNode> impl = getMultiFunctionPanParameterTypeNodeInitializer();
    if(impl != null) {
      impl.init((MultiFunctionPanParameterTypeNode)this);
    }
  }

  public static GeneratedNodeInitializer<MultiFunctionPanParameterTypeNode> getMultiFunctionPanParameterTypeNodeInitializer() {
    return f_multiFunctionPanParameterTypeNodeInitializer;
  }

  public static void setMultiFunctionPanParameterTypeNodeInitializer(GeneratedNodeInitializer<MultiFunctionPanParameterTypeNode> f_multiFunctionPanParameterTypeNodeInitializerNewValue) {
    f_multiFunctionPanParameterTypeNodeInitializer=f_multiFunctionPanParameterTypeNodeInitializerNewValue;
  }

  @Mandatory
  @Override
  public AnalogItemTypeNode getActualCoreTemperatureNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "ActualCoreTemperature");
    return (AnalogItemTypeNode) getComponent(browseName);
  }

  @Mandatory
  @Override
  public Float getActualCoreTemperature() {
    UaVariable node = getActualCoreTemperatureNode();
    if (node == null) {
      throw new RuntimeException("Mandatory node ActualCoreTemperature does not exist");
    }
    Object value = node.getValue().getValue().getValue();
    return (Float) value;
  }

  @Mandatory
  @Override
  public void setActualCoreTemperature(Float value) {
    UaVariable node = getActualCoreTemperatureNode();
    if (node == null) {
      throw new RuntimeException("Setting ActualCoreTemperature failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting ActualCoreTemperature failed unexpectedly", e);
    }
  }

  @Optional
  @Override
  public AnalogItemTypeNode getActualPressureAbsoluteNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "ActualPressureAbsolute");
    return (AnalogItemTypeNode) getComponent(browseName);
  }

  @Optional
  @Override
  public Float getActualPressureAbsolute() {
    UaVariable node = getActualPressureAbsoluteNode();
    if (node == null) {
      return null;
    }
    Object value = node.getValue().getValue().getValue();
    return (Float) value;
  }

  @Optional
  @Override
  public void setActualPressureAbsolute(Float value) {
    UaVariable node = getActualPressureAbsoluteNode();
    if (node == null) {
      throw new RuntimeException("Setting ActualPressureAbsolute failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting ActualPressureAbsolute failed unexpectedly", e);
    }
  }

  @Mandatory
  @Override
  public AnalogItemTypeNode getActualTemperatureBottomNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "ActualTemperatureBottom");
    return (AnalogItemTypeNode) getComponent(browseName);
  }

  @Mandatory
  @Override
  public Float getActualTemperatureBottom() {
    UaVariable node = getActualTemperatureBottomNode();
    if (node == null) {
      throw new RuntimeException("Mandatory node ActualTemperatureBottom does not exist");
    }
    Object value = node.getValue().getValue().getValue();
    return (Float) value;
  }

  @Mandatory
  @Override
  public void setActualTemperatureBottom(Float value) {
    UaVariable node = getActualTemperatureBottomNode();
    if (node == null) {
      throw new RuntimeException("Setting ActualTemperatureBottom failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting ActualTemperatureBottom failed unexpectedly", e);
    }
  }

  @Mandatory
  @Override
  public AnalogItemTypeNode getActualTemperatureCupNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "ActualTemperatureCup");
    return (AnalogItemTypeNode) getComponent(browseName);
  }

  @Mandatory
  @Override
  public Float getActualTemperatureCup() {
    UaVariable node = getActualTemperatureCupNode();
    if (node == null) {
      throw new RuntimeException("Mandatory node ActualTemperatureCup does not exist");
    }
    Object value = node.getValue().getValue().getValue();
    return (Float) value;
  }

  @Mandatory
  @Override
  public void setActualTemperatureCup(Float value) {
    UaVariable node = getActualTemperatureCupNode();
    if (node == null) {
      throw new RuntimeException("Setting ActualTemperatureCup failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting ActualTemperatureCup failed unexpectedly", e);
    }
  }

  public List<? extends AnalogItemType> getActualZoneTemperature__No__Nodes() {
    ExpandedNodeId placheholderId = ExpandedNodeId.parseExpandedNodeId("nsu=http://opcfoundation.org/UA/CommercialKitchenEquipment/;i=6313");
    ExpandedNodeId referenceTypeId = ExpandedNodeId.parseExpandedNodeId("nsu=http://opcfoundation.org/UA/;i=47");
    return findPlaceholders(AnalogItemType.class, placheholderId, referenceTypeId);
  }

  @Optional
  @Override
  public BaseDataVariableTypeNode getCookingLevelNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "CookingLevel");
    return (BaseDataVariableTypeNode) getComponent(browseName);
  }

  @Optional
  @Override
  public Integer getCookingLevel() {
    UaVariable node = getCookingLevelNode();
    if (node == null) {
      return null;
    }
    Object value = node.getValue().getValue().getValue();
    return (Integer) value;
  }

  @Optional
  @Override
  public void setCookingLevel(Integer value) {
    UaVariable node = getCookingLevelNode();
    if (node == null) {
      throw new RuntimeException("Setting CookingLevel failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting CookingLevel failed unexpectedly", e);
    }
  }

  @Optional
  @Override
  public BaseDataVariableTypeNode getIsLidLockedNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "IsLidLocked");
    return (BaseDataVariableTypeNode) getComponent(browseName);
  }

  @Optional
  @Override
  public Boolean isIsLidLocked() {
    UaVariable node = getIsLidLockedNode();
    if (node == null) {
      return null;
    }
    Object value = node.getValue().getValue().getValue();
    return (Boolean) value;
  }

  @Optional
  @Override
  public void setIsLidLocked(Boolean value) {
    UaVariable node = getIsLidLockedNode();
    if (node == null) {
      throw new RuntimeException("Setting IsLidLocked failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting IsLidLocked failed unexpectedly", e);
    }
  }

  @Optional
  @Override
  public BaseDataVariableTypeNode getIsLidOpenNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "IsLidOpen");
    return (BaseDataVariableTypeNode) getComponent(browseName);
  }

  @Optional
  @Override
  public Boolean isIsLidOpen() {
    UaVariable node = getIsLidOpenNode();
    if (node == null) {
      return null;
    }
    Object value = node.getValue().getValue().getValue();
    return (Boolean) value;
  }

  @Optional
  @Override
  public void setIsLidOpen(Boolean value) {
    UaVariable node = getIsLidOpenNode();
    if (node == null) {
      throw new RuntimeException("Setting IsLidOpen failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting IsLidOpen failed unexpectedly", e);
    }
  }

  @Optional
  @Override
  public BaseDataVariableTypeNode getIsWithCleaningNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "IsWithCleaning");
    return (BaseDataVariableTypeNode) getComponent(browseName);
  }

  @Optional
  @Override
  public Boolean isIsWithCleaning() {
    UaVariable node = getIsWithCleaningNode();
    if (node == null) {
      return null;
    }
    Object value = node.getValue().getValue().getValue();
    return (Boolean) value;
  }

  @Optional
  @Override
  public void setIsWithCleaning(Boolean value) {
    UaVariable node = getIsWithCleaningNode();
    if (node == null) {
      throw new RuntimeException("Setting IsWithCleaning failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting IsWithCleaning failed unexpectedly", e);
    }
  }

  @Optional
  @Override
  public BaseDataVariableTypeNode getIsWithLiftNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "IsWithLift");
    return (BaseDataVariableTypeNode) getComponent(browseName);
  }

  @Optional
  @Override
  public Boolean isIsWithLift() {
    UaVariable node = getIsWithLiftNode();
    if (node == null) {
      return null;
    }
    Object value = node.getValue().getValue().getValue();
    return (Boolean) value;
  }

  @Optional
  @Override
  public void setIsWithLift(Boolean value) {
    UaVariable node = getIsWithLiftNode();
    if (node == null) {
      throw new RuntimeException("Setting IsWithLift failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting IsWithLift failed unexpectedly", e);
    }
  }

  @Optional
  @Override
  public BaseDataVariableTypeNode getIsWithPressureNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "IsWithPressure");
    return (BaseDataVariableTypeNode) getComponent(browseName);
  }

  @Optional
  @Override
  public Boolean isIsWithPressure() {
    UaVariable node = getIsWithPressureNode();
    if (node == null) {
      return null;
    }
    Object value = node.getValue().getValue().getValue();
    return (Boolean) value;
  }

  @Optional
  @Override
  public void setIsWithPressure(Boolean value) {
    UaVariable node = getIsWithPressureNode();
    if (node == null) {
      throw new RuntimeException("Setting IsWithPressure failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting IsWithPressure failed unexpectedly", e);
    }
  }

  @Optional
  @Override
  public BaseDataVariableTypeNode getIsWithTiltingNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "IsWithTilting");
    return (BaseDataVariableTypeNode) getComponent(browseName);
  }

  @Optional
  @Override
  public Boolean isIsWithTilting() {
    UaVariable node = getIsWithTiltingNode();
    if (node == null) {
      return null;
    }
    Object value = node.getValue().getValue().getValue();
    return (Boolean) value;
  }

  @Optional
  @Override
  public void setIsWithTilting(Boolean value) {
    UaVariable node = getIsWithTiltingNode();
    if (node == null) {
      throw new RuntimeException("Setting IsWithTilting failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting IsWithTilting failed unexpectedly", e);
    }
  }

  @Mandatory
  @Override
  public BaseDataVariableTypeNode getMultiFunctionPanModeNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "MultiFunctionPanMode");
    return (BaseDataVariableTypeNode) getComponent(browseName);
  }

  @Mandatory
  @Override
  public MultiFunctionPanModeEnumeration getMultiFunctionPanMode() {
    UaVariable node = getMultiFunctionPanModeNode();
    if (node == null) {
      throw new RuntimeException("Mandatory node MultiFunctionPanMode does not exist");
    }
    Variant value = node.getValue().getValue();
    return (MultiFunctionPanModeEnumeration) value.asEnum(MultiFunctionPanModeEnumeration.class);
  }

  @Mandatory
  @Override
  public void setMultiFunctionPanMode(MultiFunctionPanModeEnumeration value) {
    UaVariable node = getMultiFunctionPanModeNode();
    if (node == null) {
      throw new RuntimeException("Setting MultiFunctionPanMode failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting MultiFunctionPanMode failed unexpectedly", e);
    }
  }

  @Mandatory
  @Override
  public AnalogItemTypeNode getSetCoreTemperatureNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "SetCoreTemperature");
    return (AnalogItemTypeNode) getComponent(browseName);
  }

  @Mandatory
  @Override
  public Float getSetCoreTemperature() {
    UaVariable node = getSetCoreTemperatureNode();
    if (node == null) {
      throw new RuntimeException("Mandatory node SetCoreTemperature does not exist");
    }
    Object value = node.getValue().getValue().getValue();
    return (Float) value;
  }

  @Mandatory
  @Override
  public void setSetCoreTemperature(Float value) {
    UaVariable node = getSetCoreTemperatureNode();
    if (node == null) {
      throw new RuntimeException("Setting SetCoreTemperature failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting SetCoreTemperature failed unexpectedly", e);
    }
  }

  @Mandatory
  @Override
  public AnalogItemTypeNode getSetProcessTimeProgramNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "SetProcessTimeProgram");
    return (AnalogItemTypeNode) getComponent(browseName);
  }

  @Mandatory
  @Override
  public Integer getSetProcessTimeProgram() {
    UaVariable node = getSetProcessTimeProgramNode();
    if (node == null) {
      throw new RuntimeException("Mandatory node SetProcessTimeProgram does not exist");
    }
    Object value = node.getValue().getValue().getValue();
    return (Integer) value;
  }

  @Mandatory
  @Override
  public void setSetProcessTimeProgram(Integer value) {
    UaVariable node = getSetProcessTimeProgramNode();
    if (node == null) {
      throw new RuntimeException("Setting SetProcessTimeProgram failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting SetProcessTimeProgram failed unexpectedly", e);
    }
  }

  @Optional
  @Override
  public AnalogItemTypeNode getSetProcessTimeStepNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "SetProcessTimeStep");
    return (AnalogItemTypeNode) getComponent(browseName);
  }

  @Optional
  @Override
  public Integer getSetProcessTimeStep() {
    UaVariable node = getSetProcessTimeStepNode();
    if (node == null) {
      return null;
    }
    Object value = node.getValue().getValue().getValue();
    return (Integer) value;
  }

  @Optional
  @Override
  public void setSetProcessTimeStep(Integer value) {
    UaVariable node = getSetProcessTimeStepNode();
    if (node == null) {
      throw new RuntimeException("Setting SetProcessTimeStep failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting SetProcessTimeStep failed unexpectedly", e);
    }
  }

  @Mandatory
  @Override
  public AnalogItemTypeNode getSetTemperatureNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "SetTemperature");
    return (AnalogItemTypeNode) getComponent(browseName);
  }

  @Mandatory
  @Override
  public Float getSetTemperature() {
    UaVariable node = getSetTemperatureNode();
    if (node == null) {
      throw new RuntimeException("Mandatory node SetTemperature does not exist");
    }
    Object value = node.getValue().getValue().getValue();
    return (Float) value;
  }

  @Mandatory
  @Override
  public void setSetTemperature(Float value) {
    UaVariable node = getSetTemperatureNode();
    if (node == null) {
      throw new RuntimeException("Setting SetTemperature failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting SetTemperature failed unexpectedly", e);
    }
  }

  public List<? extends AnalogItemType> getSetZoneTemperature__No__Nodes() {
    ExpandedNodeId placheholderId = ExpandedNodeId.parseExpandedNodeId("nsu=http://opcfoundation.org/UA/CommercialKitchenEquipment/;i=6311");
    ExpandedNodeId referenceTypeId = ExpandedNodeId.parseExpandedNodeId("nsu=http://opcfoundation.org/UA/;i=47");
    return findPlaceholders(AnalogItemType.class, placheholderId, referenceTypeId);
  }

  @Optional
  @Override
  public BaseDataVariableTypeNode getSpecialFunctionModeNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "SpecialFunctionMode");
    return (BaseDataVariableTypeNode) getComponent(browseName);
  }

  @Optional
  @Override
  public SpecialFunctionModeEnumeration getSpecialFunctionMode() {
    UaVariable node = getSpecialFunctionModeNode();
    if (node == null) {
      return null;
    }
    Variant value = node.getValue().getValue();
    return (SpecialFunctionModeEnumeration) value.asEnum(SpecialFunctionModeEnumeration.class);
  }

  @Optional
  @Override
  public void setSpecialFunctionMode(SpecialFunctionModeEnumeration value) {
    UaVariable node = getSpecialFunctionModeNode();
    if (node == null) {
      throw new RuntimeException("Setting SpecialFunctionMode failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting SpecialFunctionMode failed unexpectedly", e);
    }
  }

  @Mandatory
  @Override
  public AnalogItemTypeNode getTimeRemainingProgramNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "TimeRemainingProgram");
    return (AnalogItemTypeNode) getComponent(browseName);
  }

  @Mandatory
  @Override
  public Integer getTimeRemainingProgram() {
    UaVariable node = getTimeRemainingProgramNode();
    if (node == null) {
      throw new RuntimeException("Mandatory node TimeRemainingProgram does not exist");
    }
    Object value = node.getValue().getValue().getValue();
    return (Integer) value;
  }

  @Mandatory
  @Override
  public void setTimeRemainingProgram(Integer value) {
    UaVariable node = getTimeRemainingProgramNode();
    if (node == null) {
      throw new RuntimeException("Setting TimeRemainingProgram failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting TimeRemainingProgram failed unexpectedly", e);
    }
  }

  @Optional
  @Override
  public AnalogItemTypeNode getTimeRemainingStepNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "TimeRemainingStep");
    return (AnalogItemTypeNode) getComponent(browseName);
  }

  @Optional
  @Override
  public Integer getTimeRemainingStep() {
    UaVariable node = getTimeRemainingStepNode();
    if (node == null) {
      return null;
    }
    Object value = node.getValue().getValue().getValue();
    return (Integer) value;
  }

  @Optional
  @Override
  public void setTimeRemainingStep(Integer value) {
    UaVariable node = getTimeRemainingStepNode();
    if (node == null) {
      throw new RuntimeException("Setting TimeRemainingStep failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting TimeRemainingStep failed unexpectedly", e);
    }
  }

  @Override
  public Variant[] callMethod(ServiceContext serviceContext, NodeId methodId,
      Variant[] inputArguments, StatusCode[] inputArgumentResults,
      DiagnosticInfo[] inputArgumentDiagnosticInfos) throws StatusException {
    return super.callMethod(serviceContext, methodId, inputArguments, inputArgumentResults, inputArgumentDiagnosticInfos);
  }
}
