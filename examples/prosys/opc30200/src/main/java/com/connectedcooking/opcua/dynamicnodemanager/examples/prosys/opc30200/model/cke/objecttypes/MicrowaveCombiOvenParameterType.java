// Generated by Prosys OPC UA Java SDK Codegen
//
package com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.cke.objecttypes;

import com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.cke.datatypes.OperatingModeEnumeration;
import com.prosysopc.ua.StatusException;
import com.prosysopc.ua.TypeDefinitionId;
import com.prosysopc.ua.nodes.Mandatory;
import com.prosysopc.ua.nodes.Optional;
import com.prosysopc.ua.types.opcua.AnalogItemType;
import com.prosysopc.ua.types.opcua.BaseDataVariableType;
import java.lang.Boolean;
import java.lang.Float;
import java.lang.Integer;
import java.lang.String;

/**
 * Generated on 2025-04-16 18:27:26
 */
@TypeDefinitionId("nsu=http://opcfoundation.org/UA/CommercialKitchenEquipment/;i=1033")
public interface MicrowaveCombiOvenParameterType extends KitchenDeviceParameterType {
  String ACTUAL_TEMPERATURE_CHAMBER = "ActualTemperatureChamber";

  String COOKING_STEP = "CookingStep";

  String FAN_SPEED = "FanSpeed";

  String IS_DOOR_OPEN = "IsDoorOpen";

  String MICROWAVE_ENERGY = "MicrowaveEnergy";

  String OPERATING_MODE = "OperatingMode";

  String REMAINING_PROCESS_TIME = "RemainingProcessTime";

  String REMAINING_PROCESS_TIME_STEP = "RemainingProcessTimeStep";

  String SET_PROCESS_TIME = "SetProcessTime";

  String SET_TEMPERATURE = "SetTemperature";

  @Mandatory
  AnalogItemType getActualTemperatureChamberNode();

  @Mandatory
  Float getActualTemperatureChamber();

  @Mandatory
  void setActualTemperatureChamber(Float value) throws StatusException;

  @Optional
  BaseDataVariableType getCookingStepNode();

  @Optional
  Integer getCookingStep();

  @Optional
  void setCookingStep(Integer value) throws StatusException;

  @Optional
  AnalogItemType getFanSpeedNode();

  @Optional
  Integer getFanSpeed();

  @Optional
  void setFanSpeed(Integer value) throws StatusException;

  @Mandatory
  BaseDataVariableType getIsDoorOpenNode();

  @Mandatory
  Boolean isIsDoorOpen();

  @Mandatory
  void setIsDoorOpen(Boolean value) throws StatusException;

  @Optional
  AnalogItemType getMicrowaveEnergyNode();

  @Optional
  Integer getMicrowaveEnergy();

  @Optional
  void setMicrowaveEnergy(Integer value) throws StatusException;

  @Mandatory
  BaseDataVariableType getOperatingModeNode();

  @Mandatory
  OperatingModeEnumeration getOperatingMode();

  @Mandatory
  void setOperatingMode(OperatingModeEnumeration value) throws StatusException;

  @Mandatory
  AnalogItemType getRemainingProcessTimeNode();

  @Mandatory
  Integer getRemainingProcessTime();

  @Mandatory
  void setRemainingProcessTime(Integer value) throws StatusException;

  @Optional
  AnalogItemType getRemainingProcessTimeStepNode();

  @Optional
  Integer getRemainingProcessTimeStep();

  @Optional
  void setRemainingProcessTimeStep(Integer value) throws StatusException;

  @Mandatory
  AnalogItemType getSetProcessTimeNode();

  @Mandatory
  Integer getSetProcessTime();

  @Mandatory
  void setSetProcessTime(Integer value) throws StatusException;

  @Mandatory
  AnalogItemType getSetTemperatureNode();

  @Mandatory
  Float getSetTemperature();

  @Mandatory
  void setSetTemperature(Float value) throws StatusException;
}
