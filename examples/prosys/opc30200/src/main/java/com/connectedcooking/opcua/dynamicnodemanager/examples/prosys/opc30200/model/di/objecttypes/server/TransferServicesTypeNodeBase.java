// Generated by Prosys OPC UA Java SDK Codegen
//
package com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.di.objecttypes.server;

import com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.di.objecttypes.TransferServicesType;
import com.prosysopc.ua.StatusException;
import com.prosysopc.ua.TypeDefinitionId;
import com.prosysopc.ua.nodes.Mandatory;
import com.prosysopc.ua.nodes.UaMethod;
import com.prosysopc.ua.nodes.UaNode;
import com.prosysopc.ua.server.GeneratedNodeInitializer;
import com.prosysopc.ua.server.ServiceContext;
import com.prosysopc.ua.stack.builtintypes.DiagnosticInfo;
import com.prosysopc.ua.stack.builtintypes.NodeId;
import com.prosysopc.ua.stack.builtintypes.QualifiedName;
import com.prosysopc.ua.stack.builtintypes.StatusCode;
import com.prosysopc.ua.stack.builtintypes.Structure;
import com.prosysopc.ua.stack.builtintypes.Variant;
import com.prosysopc.ua.types.opcua.server.BaseObjectTypeNode;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Override;

/**
 * Generated on 2023-09-26 10:56:50
 */
@TypeDefinitionId("nsu=http://opcfoundation.org/UA/DI/;i=6526")
public abstract class TransferServicesTypeNodeBase extends BaseObjectTypeNode implements TransferServicesType {
  private static GeneratedNodeInitializer<TransferServicesTypeNode> f_transferServicesTypeNodeInitializer;

  private static TransferServicesTypeTransferToDeviceMethod f_transferToDeviceMethodImplementation;

  private static TransferServicesTypeTransferFromDeviceMethod f_transferFromDeviceMethodImplementation;

  private static TransferServicesTypeFetchTransferResultDataMethod f_fetchTransferResultDataMethodImplementation;

  protected TransferServicesTypeNodeBase(UaNode.Parameters parameters) {
    super(parameters);
  }

  @Override
  public void afterCreate() {
    super.afterCreate();

    // Call afterCreate for each sub-node (if the node has any)
    GeneratedNodeInitializer<TransferServicesTypeNode> impl = getTransferServicesTypeNodeInitializer();
    if(impl != null) {
      impl.init((TransferServicesTypeNode)this);
    }
  }

  public static GeneratedNodeInitializer<TransferServicesTypeNode> getTransferServicesTypeNodeInitializer() {
    return f_transferServicesTypeNodeInitializer;
  }

  public static void setTransferServicesTypeNodeInitializer(GeneratedNodeInitializer<TransferServicesTypeNode> f_transferServicesTypeNodeInitializerNewValue) {
    f_transferServicesTypeNodeInitializer=f_transferServicesTypeNodeInitializerNewValue;
  }

  @Override
  public Variant[] callMethod(ServiceContext serviceContext, NodeId methodId,
      Variant[] inputArguments, StatusCode[] inputArgumentResults,
      DiagnosticInfo[] inputArgumentDiagnosticInfos) throws StatusException {
    if (isComponentMatch(getQualifiedName("http://opcfoundation.org/UA/DI/", "TransferToDevice"), methodId)) {
      return doTransferToDevice(serviceContext).asVariantArray();
    }
    if (isComponentMatch(getQualifiedName("http://opcfoundation.org/UA/DI/", "TransferFromDevice"), methodId)) {
      return doTransferFromDevice(serviceContext).asVariantArray();
    }
    if (isComponentMatch(getQualifiedName("http://opcfoundation.org/UA/DI/", "FetchTransferResultData"), methodId)) {
      return new Variant[]{new Variant(doFetchTransferResultData(serviceContext, (Integer) inputArguments[0].getValue(), (Integer) inputArguments[1].getValue(), (Integer) inputArguments[2].getValue(), (Boolean) inputArguments[3].getValue()))};
    }
    return super.callMethod(serviceContext, methodId, inputArguments, inputArgumentResults, inputArgumentDiagnosticInfos);
  }

  @Mandatory
  @Override
  public UaMethod getTransferToDeviceNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/DI/", "TransferToDevice");
    return (UaMethod) getComponent(browseName);
  }

  protected abstract TransferServicesType.TransferToDeviceMethodOutputs onTransferToDevice(ServiceContext serviceContext)
      throws StatusException;

  @Override
  public TransferServicesType.TransferToDeviceMethodOutputs transferToDevice() throws
      StatusException {
    return doTransferToDevice(ServiceContext.INTERNAL_OPERATION_CONTEXT);
  }

  private TransferServicesType.TransferToDeviceMethodOutputs doTransferToDevice(ServiceContext serviceContext)
      throws StatusException {
    TransferServicesTypeTransferToDeviceMethod impl = getTransferToDeviceMethodImplementation();
    if(impl != null) {
      return impl.transferToDevice(serviceContext, (TransferServicesTypeNode)this);
    } else {
      return onTransferToDevice(serviceContext);
    }
  }

  public static TransferServicesTypeTransferToDeviceMethod getTransferToDeviceMethodImplementation() {
    return f_transferToDeviceMethodImplementation;
  }

  public static void setTransferToDeviceMethodImplementation(TransferServicesTypeTransferToDeviceMethod f_transferToDeviceMethodImplementationNewValue) {
    f_transferToDeviceMethodImplementation=f_transferToDeviceMethodImplementationNewValue;
  }

  @Mandatory
  @Override
  public UaMethod getTransferFromDeviceNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/DI/", "TransferFromDevice");
    return (UaMethod) getComponent(browseName);
  }

  protected abstract TransferServicesType.TransferFromDeviceMethodOutputs onTransferFromDevice(ServiceContext serviceContext)
      throws StatusException;

  @Override
  public TransferServicesType.TransferFromDeviceMethodOutputs transferFromDevice() throws
      StatusException {
    return doTransferFromDevice(ServiceContext.INTERNAL_OPERATION_CONTEXT);
  }

  private TransferServicesType.TransferFromDeviceMethodOutputs doTransferFromDevice(ServiceContext serviceContext)
      throws StatusException {
    TransferServicesTypeTransferFromDeviceMethod impl = getTransferFromDeviceMethodImplementation();
    if(impl != null) {
      return impl.transferFromDevice(serviceContext, (TransferServicesTypeNode)this);
    } else {
      return onTransferFromDevice(serviceContext);
    }
  }

  public static TransferServicesTypeTransferFromDeviceMethod getTransferFromDeviceMethodImplementation() {
    return f_transferFromDeviceMethodImplementation;
  }

  public static void setTransferFromDeviceMethodImplementation(TransferServicesTypeTransferFromDeviceMethod f_transferFromDeviceMethodImplementationNewValue) {
    f_transferFromDeviceMethodImplementation=f_transferFromDeviceMethodImplementationNewValue;
  }

  @Mandatory
  @Override
  public UaMethod getFetchTransferResultDataNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/DI/", "FetchTransferResultData");
    return (UaMethod) getComponent(browseName);
  }

  protected abstract Structure onFetchTransferResultData(ServiceContext serviceContext,
      Integer f_transferID, Integer f_sequenceNumber, Integer f_maxParameterResultsToReturn,
      Boolean f_omitGoodResults) throws StatusException;

  @Override
  public Structure fetchTransferResultData(Integer f_transferID, Integer f_sequenceNumber,
      Integer f_maxParameterResultsToReturn, Boolean f_omitGoodResults) throws StatusException {
    return doFetchTransferResultData(ServiceContext.INTERNAL_OPERATION_CONTEXT, f_transferID, f_sequenceNumber, f_maxParameterResultsToReturn, f_omitGoodResults);
  }

  private Structure doFetchTransferResultData(ServiceContext serviceContext, Integer f_transferID,
      Integer f_sequenceNumber, Integer f_maxParameterResultsToReturn, Boolean f_omitGoodResults)
      throws StatusException {
    TransferServicesTypeFetchTransferResultDataMethod impl = getFetchTransferResultDataMethodImplementation();
    if(impl != null) {
      return impl.fetchTransferResultData(serviceContext, (TransferServicesTypeNode)this, f_transferID, f_sequenceNumber, f_maxParameterResultsToReturn, f_omitGoodResults);
    } else {
      return onFetchTransferResultData(serviceContext, f_transferID, f_sequenceNumber, f_maxParameterResultsToReturn, f_omitGoodResults);
    }
  }

  public static TransferServicesTypeFetchTransferResultDataMethod getFetchTransferResultDataMethodImplementation() {
    return f_fetchTransferResultDataMethodImplementation;
  }

  public static void setFetchTransferResultDataMethodImplementation(TransferServicesTypeFetchTransferResultDataMethod f_fetchTransferResultDataMethodImplementationNewValue) {
    f_fetchTransferResultDataMethodImplementation=f_fetchTransferResultDataMethodImplementationNewValue;
  }
}
