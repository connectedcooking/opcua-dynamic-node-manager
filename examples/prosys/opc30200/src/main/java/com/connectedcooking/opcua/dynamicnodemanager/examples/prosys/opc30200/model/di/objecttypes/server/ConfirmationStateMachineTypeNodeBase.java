// Generated by Prosys OPC UA Java SDK Codegen
//
package com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.di.objecttypes.server;

import com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.di.objecttypes.ConfirmationStateMachineType;
import com.prosysopc.ua.StatusException;
import com.prosysopc.ua.TypeDefinitionId;
import com.prosysopc.ua.nodes.Mandatory;
import com.prosysopc.ua.nodes.UaMethod;
import com.prosysopc.ua.nodes.UaNode;
import com.prosysopc.ua.nodes.UaVariable;
import com.prosysopc.ua.server.GeneratedNodeInitializer;
import com.prosysopc.ua.server.ServiceContext;
import com.prosysopc.ua.stack.builtintypes.DiagnosticInfo;
import com.prosysopc.ua.stack.builtintypes.NodeId;
import com.prosysopc.ua.stack.builtintypes.QualifiedName;
import com.prosysopc.ua.stack.builtintypes.StatusCode;
import com.prosysopc.ua.stack.builtintypes.Variant;
import com.prosysopc.ua.types.opcua.server.BaseDataVariableTypeNode;
import com.prosysopc.ua.types.opcua.server.FiniteStateMachineTypeNode;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.RuntimeException;

/**
 * Generated on 2024-09-09 10:35:45
 */
@TypeDefinitionId("nsu=http://opcfoundation.org/UA/DI/;i=307")
public abstract class ConfirmationStateMachineTypeNodeBase extends FiniteStateMachineTypeNode implements ConfirmationStateMachineType {
  private static GeneratedNodeInitializer<ConfirmationStateMachineTypeNode> f_confirmationStateMachineTypeNodeInitializer;

  private static ConfirmationStateMachineTypeConfirmMethod f_confirmMethodImplementation;

  protected ConfirmationStateMachineTypeNodeBase(UaNode.Parameters parameters) {
    super(parameters);
  }

  @Override
  public void afterCreate() {
    super.afterCreate();

    // Call afterCreate for each sub-node (if the node has any)
    callAfterCreateIfExists(getConfirmationTimeoutNode());
    GeneratedNodeInitializer<ConfirmationStateMachineTypeNode> impl = getConfirmationStateMachineTypeNodeInitializer();
    if(impl != null) {
      impl.init((ConfirmationStateMachineTypeNode)this);
    }
  }

  public static GeneratedNodeInitializer<ConfirmationStateMachineTypeNode> getConfirmationStateMachineTypeNodeInitializer() {
    return f_confirmationStateMachineTypeNodeInitializer;
  }

  public static void setConfirmationStateMachineTypeNodeInitializer(GeneratedNodeInitializer<ConfirmationStateMachineTypeNode> f_confirmationStateMachineTypeNodeInitializerNewValue) {
    f_confirmationStateMachineTypeNodeInitializer=f_confirmationStateMachineTypeNodeInitializerNewValue;
  }

  @Mandatory
  @Override
  public BaseDataVariableTypeNode getConfirmationTimeoutNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/DI/", "ConfirmationTimeout");
    return (BaseDataVariableTypeNode) getComponent(browseName);
  }

  @Mandatory
  @Override
  public Double getConfirmationTimeout() {
    UaVariable node = getConfirmationTimeoutNode();
    if (node == null) {
      throw new RuntimeException("Mandatory node ConfirmationTimeout does not exist");
    }
    Object value = node.getValue().getValue().getValue();
    return (Double) value;
  }

  @Mandatory
  @Override
  public void setConfirmationTimeout(Double value) {
    UaVariable node = getConfirmationTimeoutNode();
    if (node == null) {
      throw new RuntimeException("Setting ConfirmationTimeout failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting ConfirmationTimeout failed unexpectedly", e);
    }
  }

  @Override
  public Variant[] callMethod(ServiceContext serviceContext, NodeId methodId,
      Variant[] inputArguments, StatusCode[] inputArgumentResults,
      DiagnosticInfo[] inputArgumentDiagnosticInfos) throws StatusException {
    if (isComponentMatch(getQualifiedName("http://opcfoundation.org/UA/DI/", "Confirm"), methodId)) {
      doConfirm(serviceContext);
      return null;
    }
    return super.callMethod(serviceContext, methodId, inputArguments, inputArgumentResults, inputArgumentDiagnosticInfos);
  }

  @Mandatory
  @Override
  public UaMethod getConfirmNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/DI/", "Confirm");
    return (UaMethod) getComponent(browseName);
  }

  protected abstract void onConfirm(ServiceContext serviceContext) throws StatusException;

  @Override
  public void confirm() throws StatusException {
    doConfirm(ServiceContext.INTERNAL_OPERATION_CONTEXT);
  }

  private void doConfirm(ServiceContext serviceContext) throws StatusException {
    ConfirmationStateMachineTypeConfirmMethod impl = getConfirmMethodImplementation();
    if(impl != null) {
      impl.confirm(serviceContext, (ConfirmationStateMachineTypeNode)this);
    } else {
      onConfirm(serviceContext);
    }
  }

  public static ConfirmationStateMachineTypeConfirmMethod getConfirmMethodImplementation() {
    return f_confirmMethodImplementation;
  }

  public static void setConfirmMethodImplementation(ConfirmationStateMachineTypeConfirmMethod f_confirmMethodImplementationNewValue) {
    f_confirmMethodImplementation=f_confirmMethodImplementationNewValue;
  }
}
