// Generated by Prosys OPC UA Java SDK Codegen
//
package com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.cke.objecttypes.server;

import com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.cke.objecttypes.IceMachineDeviceType;
import com.prosysopc.ua.StatusException;
import com.prosysopc.ua.TypeDefinitionId;
import com.prosysopc.ua.nodes.Mandatory;
import com.prosysopc.ua.nodes.UaNode;
import com.prosysopc.ua.server.GeneratedNodeInitializer;
import com.prosysopc.ua.server.ServiceContext;
import com.prosysopc.ua.stack.builtintypes.DiagnosticInfo;
import com.prosysopc.ua.stack.builtintypes.NodeId;
import com.prosysopc.ua.stack.builtintypes.QualifiedName;
import com.prosysopc.ua.stack.builtintypes.StatusCode;
import com.prosysopc.ua.stack.builtintypes.Variant;
import java.lang.Override;

/**
 * Generated on 2025-04-16 18:27:26
 */
@TypeDefinitionId("nsu=http://opcfoundation.org/UA/CommercialKitchenEquipment/;i=1036")
public abstract class IceMachineDeviceTypeNodeBase extends CommercialKitchenDeviceTypeNode implements IceMachineDeviceType {
  private static GeneratedNodeInitializer<IceMachineDeviceTypeNode> f_iceMachineDeviceTypeNodeInitializer;

  protected IceMachineDeviceTypeNodeBase(Parameters parameters) {
    super(parameters);
  }

  @Override
  public void afterCreate() {
    super.afterCreate();

    // Call afterCreate for each sub-node (if the node has any)
    callAfterCreateIfExists(getIceMachineNode());
    GeneratedNodeInitializer<IceMachineDeviceTypeNode> impl = getIceMachineDeviceTypeNodeInitializer();
    if(impl != null) {
      impl.init((IceMachineDeviceTypeNode)this);
    }
  }

  public static GeneratedNodeInitializer<IceMachineDeviceTypeNode> getIceMachineDeviceTypeNodeInitializer() {
    return f_iceMachineDeviceTypeNodeInitializer;
  }

  public static void setIceMachineDeviceTypeNodeInitializer(GeneratedNodeInitializer<IceMachineDeviceTypeNode> f_iceMachineDeviceTypeNodeInitializerNewValue) {
    f_iceMachineDeviceTypeNodeInitializer=f_iceMachineDeviceTypeNodeInitializerNewValue;
  }

  @Mandatory
  @Override
  public IceMachineParameterTypeNode getIceMachineNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "IceMachine");
    return (IceMachineParameterTypeNode) getComponent(browseName);
  }

  @Override
  public Variant[] callMethod(ServiceContext serviceContext, NodeId methodId,
      Variant[] inputArguments, StatusCode[] inputArgumentResults,
      DiagnosticInfo[] inputArgumentDiagnosticInfos) throws StatusException {
    return super.callMethod(serviceContext, methodId, inputArguments, inputArgumentResults, inputArgumentDiagnosticInfos);
  }
}
