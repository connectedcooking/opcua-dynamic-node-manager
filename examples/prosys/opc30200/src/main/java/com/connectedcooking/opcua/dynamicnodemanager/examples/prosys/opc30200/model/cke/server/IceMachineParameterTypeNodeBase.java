// Generated by Prosys OPC UA Java SDK Codegen
//
package com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.cke.server;

import com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.cke.IceMachineParameterType;
import com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.cke.StatusEnumeration;
import com.prosysopc.ua.StatusException;
import com.prosysopc.ua.TypeDefinitionId;
import com.prosysopc.ua.nodes.Optional;
import com.prosysopc.ua.nodes.UaVariable;
import com.prosysopc.ua.server.GeneratedNodeInitializer;
import com.prosysopc.ua.server.NodeManagerUaNode;
import com.prosysopc.ua.server.ServiceContext;
import com.prosysopc.ua.stack.builtintypes.DiagnosticInfo;
import com.prosysopc.ua.stack.builtintypes.ExpandedNodeId;
import com.prosysopc.ua.stack.builtintypes.LocalizedText;
import com.prosysopc.ua.stack.builtintypes.NodeId;
import com.prosysopc.ua.stack.builtintypes.QualifiedName;
import com.prosysopc.ua.stack.builtintypes.StatusCode;
import com.prosysopc.ua.stack.builtintypes.Variant;
import com.prosysopc.ua.types.opcua.AnalogItemType;
import com.prosysopc.ua.types.opcua.server.AnalogItemTypeNode;
import com.prosysopc.ua.types.opcua.server.BaseDataVariableTypeNode;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.RuntimeException;
import java.util.List;

/**
 * Generated on 2022-10-10 10:21:34
 */
@TypeDefinitionId("nsu=http://opcfoundation.org/UA/CommercialKitchenEquipment/;i=1035")
public abstract class IceMachineParameterTypeNodeBase extends KitchenDeviceParameterTypeNode implements IceMachineParameterType {
  private static GeneratedNodeInitializer<IceMachineParameterTypeNode> f_iceMachineParameterTypeNodeInitializer;

  protected IceMachineParameterTypeNodeBase(NodeManagerUaNode nodeManager, NodeId nodeId,
      QualifiedName browseName, LocalizedText displayName) {
    super(nodeManager, nodeId, browseName, displayName);
  }

  @Override
  public void afterCreate() {
    super.afterCreate();

    // Call afterCreate for each sub-node (if the node has any)
    callAfterCreateIfExists(getLastFreezeTimeNode());
    callAfterCreateIfExists(getLastHarvestTimeNode());
    callAfterCreateIfExists(getStatusNode());
    callAfterCreateIfExists(getWaterFillTimeNode());
    GeneratedNodeInitializer<IceMachineParameterTypeNode> impl = getIceMachineParameterTypeNodeInitializer();
    if(impl != null) {
      impl.init((IceMachineParameterTypeNode)this);
    }
  }

  public static GeneratedNodeInitializer<IceMachineParameterTypeNode> getIceMachineParameterTypeNodeInitializer() {
    return f_iceMachineParameterTypeNodeInitializer;
  }

  public static void setIceMachineParameterTypeNodeInitializer(GeneratedNodeInitializer<IceMachineParameterTypeNode> f_iceMachineParameterTypeNodeInitializerNewValue) {
    f_iceMachineParameterTypeNodeInitializer=f_iceMachineParameterTypeNodeInitializerNewValue;
  }

  @Optional
  @Override
  public AnalogItemTypeNode getLastFreezeTimeNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "LastFreezeTime");
    return (AnalogItemTypeNode) getComponent(browseName);
  }

  @Optional
  @Override
  public Integer getLastFreezeTime() {
    UaVariable node = getLastFreezeTimeNode();
    if (node == null) {
      return null;
    }
    Object value = node.getValue().getValue().getValue();
    return (Integer) value;
  }

  @Optional
  @Override
  public void setLastFreezeTime(Integer value) {
    UaVariable node = getLastFreezeTimeNode();
    if (node == null) {
      throw new RuntimeException("Setting LastFreezeTime failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting LastFreezeTime failed unexpectedly", e);
    }
  }

  @Optional
  @Override
  public AnalogItemTypeNode getLastHarvestTimeNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "LastHarvestTime");
    return (AnalogItemTypeNode) getComponent(browseName);
  }

  @Optional
  @Override
  public Integer getLastHarvestTime() {
    UaVariable node = getLastHarvestTimeNode();
    if (node == null) {
      return null;
    }
    Object value = node.getValue().getValue().getValue();
    return (Integer) value;
  }

  @Optional
  @Override
  public void setLastHarvestTime(Integer value) {
    UaVariable node = getLastHarvestTimeNode();
    if (node == null) {
      throw new RuntimeException("Setting LastHarvestTime failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting LastHarvestTime failed unexpectedly", e);
    }
  }

  @Optional
  @Override
  public BaseDataVariableTypeNode getStatusNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "Status");
    return (BaseDataVariableTypeNode) getComponent(browseName);
  }

  @Optional
  @Override
  public StatusEnumeration getStatus() {
    UaVariable node = getStatusNode();
    if (node == null) {
      return null;
    }
    Variant value = node.getValue().getValue();
    return (StatusEnumeration) value.asEnum(StatusEnumeration.class);
  }

  @Optional
  @Override
  public void setStatus(StatusEnumeration value) {
    UaVariable node = getStatusNode();
    if (node == null) {
      throw new RuntimeException("Setting Status failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting Status failed unexpectedly", e);
    }
  }

  public List<? extends AnalogItemType> getTemperature__No__Nodes() {
    ExpandedNodeId placheholderId = ExpandedNodeId.parseExpandedNodeId("nsu=http://opcfoundation.org/UA/CommercialKitchenEquipment/;i=6628");
    ExpandedNodeId referenceTypeId = ExpandedNodeId.parseExpandedNodeId("nsu=http://opcfoundation.org/UA/;i=47");
    return findPlaceholders(AnalogItemType.class, placheholderId, referenceTypeId);
  }

  @Optional
  @Override
  public AnalogItemTypeNode getWaterFillTimeNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "WaterFillTime");
    return (AnalogItemTypeNode) getComponent(browseName);
  }

  @Optional
  @Override
  public Integer getWaterFillTime() {
    UaVariable node = getWaterFillTimeNode();
    if (node == null) {
      return null;
    }
    Object value = node.getValue().getValue().getValue();
    return (Integer) value;
  }

  @Optional
  @Override
  public void setWaterFillTime(Integer value) {
    UaVariable node = getWaterFillTimeNode();
    if (node == null) {
      throw new RuntimeException("Setting WaterFillTime failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting WaterFillTime failed unexpectedly", e);
    }
  }

  @Override
  public Variant[] callMethod(ServiceContext serviceContext, NodeId methodId,
      Variant[] inputArguments, StatusCode[] inputArgumentResults,
      DiagnosticInfo[] inputArgumentDiagnosticInfos) throws StatusException {
    return super.callMethod(serviceContext, methodId, inputArguments, inputArgumentResults, inputArgumentDiagnosticInfos);
  }
}
