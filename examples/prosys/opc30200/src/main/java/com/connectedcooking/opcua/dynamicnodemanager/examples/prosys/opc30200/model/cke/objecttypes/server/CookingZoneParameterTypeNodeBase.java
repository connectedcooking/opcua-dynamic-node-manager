// Generated by Prosys OPC UA Java SDK Codegen
//
package com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.cke.objecttypes.server;

import com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.cke.datatypes.CurrentStateEnumeration;
import com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.cke.objecttypes.CookingZoneParameterType;
import com.prosysopc.ua.StatusException;
import com.prosysopc.ua.TypeDefinitionId;
import com.prosysopc.ua.nodes.Mandatory;
import com.prosysopc.ua.nodes.Optional;
import com.prosysopc.ua.nodes.UaNode;
import com.prosysopc.ua.nodes.UaVariable;
import com.prosysopc.ua.server.GeneratedNodeInitializer;
import com.prosysopc.ua.server.ServiceContext;
import com.prosysopc.ua.stack.builtintypes.DiagnosticInfo;
import com.prosysopc.ua.stack.builtintypes.NodeId;
import com.prosysopc.ua.stack.builtintypes.QualifiedName;
import com.prosysopc.ua.stack.builtintypes.StatusCode;
import com.prosysopc.ua.stack.builtintypes.Variant;
import com.prosysopc.ua.types.opcua.server.AnalogItemTypeNode;
import com.prosysopc.ua.types.opcua.server.BaseDataVariableTypeNode;
import java.lang.Boolean;
import java.lang.Float;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.RuntimeException;
import java.lang.String;

/**
 * Generated on 2024-06-17 14:43:51
 */
@TypeDefinitionId("nsu=http://opcfoundation.org/UA/CommercialKitchenEquipment/;i=1029")
public abstract class CookingZoneParameterTypeNodeBase extends KitchenDeviceParameterTypeNode implements CookingZoneParameterType {
  private static GeneratedNodeInitializer<CookingZoneParameterTypeNode> f_cookingZoneParameterTypeNodeInitializer;

  protected CookingZoneParameterTypeNodeBase(UaNode.Parameters parameters) {
    super(parameters);
  }

  @Override
  public void afterCreate() {
    super.afterCreate();

    // Call afterCreate for each sub-node (if the node has any)
    callAfterCreateIfExists(getActualPowerNode());
    callAfterCreateIfExists(getActualProcessTimeNode());
    callAfterCreateIfExists(getActualTemperatureNode());
    callAfterCreateIfExists(getCookingZoneNameNode());
    callAfterCreateIfExists(getCurrentStateNode());
    callAfterCreateIfExists(getIsPanDetectedNode());
    callAfterCreateIfExists(getNominalPowerNode());
    callAfterCreateIfExists(getSetPowerValueNode());
    callAfterCreateIfExists(getSetTemperatureNode());
    GeneratedNodeInitializer<CookingZoneParameterTypeNode> impl = getCookingZoneParameterTypeNodeInitializer();
    if(impl != null) {
      impl.init((CookingZoneParameterTypeNode)this);
    }
  }

  public static GeneratedNodeInitializer<CookingZoneParameterTypeNode> getCookingZoneParameterTypeNodeInitializer() {
    return f_cookingZoneParameterTypeNodeInitializer;
  }

  public static void setCookingZoneParameterTypeNodeInitializer(GeneratedNodeInitializer<CookingZoneParameterTypeNode> f_cookingZoneParameterTypeNodeInitializerNewValue) {
    f_cookingZoneParameterTypeNodeInitializer=f_cookingZoneParameterTypeNodeInitializerNewValue;
  }

  @Optional
  @Override
  public AnalogItemTypeNode getActualPowerNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "ActualPower");
    return (AnalogItemTypeNode) getComponent(browseName);
  }

  @Optional
  @Override
  public Float getActualPower() {
    UaVariable node = getActualPowerNode();
    if (node == null) {
      return null;
    }
    Object value = node.getValue().getValue().getValue();
    return (Float) value;
  }

  @Optional
  @Override
  public void setActualPower(Float value) {
    UaVariable node = getActualPowerNode();
    if (node == null) {
      throw new RuntimeException("Setting ActualPower failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting ActualPower failed unexpectedly", e);
    }
  }

  @Optional
  @Override
  public AnalogItemTypeNode getActualProcessTimeNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "ActualProcessTime");
    return (AnalogItemTypeNode) getComponent(browseName);
  }

  @Optional
  @Override
  public Integer getActualProcessTime() {
    UaVariable node = getActualProcessTimeNode();
    if (node == null) {
      return null;
    }
    Object value = node.getValue().getValue().getValue();
    return (Integer) value;
  }

  @Optional
  @Override
  public void setActualProcessTime(Integer value) {
    UaVariable node = getActualProcessTimeNode();
    if (node == null) {
      throw new RuntimeException("Setting ActualProcessTime failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting ActualProcessTime failed unexpectedly", e);
    }
  }

  @Optional
  @Override
  public AnalogItemTypeNode getActualTemperatureNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "ActualTemperature");
    return (AnalogItemTypeNode) getComponent(browseName);
  }

  @Optional
  @Override
  public Float getActualTemperature() {
    UaVariable node = getActualTemperatureNode();
    if (node == null) {
      return null;
    }
    Object value = node.getValue().getValue().getValue();
    return (Float) value;
  }

  @Optional
  @Override
  public void setActualTemperature(Float value) {
    UaVariable node = getActualTemperatureNode();
    if (node == null) {
      throw new RuntimeException("Setting ActualTemperature failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting ActualTemperature failed unexpectedly", e);
    }
  }

  @Optional
  @Override
  public BaseDataVariableTypeNode getCookingZoneNameNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "CookingZoneName");
    return (BaseDataVariableTypeNode) getComponent(browseName);
  }

  @Optional
  @Override
  public String getCookingZoneName() {
    UaVariable node = getCookingZoneNameNode();
    if (node == null) {
      return null;
    }
    Object value = node.getValue().getValue().getValue();
    return (String) value;
  }

  @Optional
  @Override
  public void setCookingZoneName(String value) {
    UaVariable node = getCookingZoneNameNode();
    if (node == null) {
      throw new RuntimeException("Setting CookingZoneName failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting CookingZoneName failed unexpectedly", e);
    }
  }

  @Optional
  @Override
  public BaseDataVariableTypeNode getCurrentStateNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "CurrentState");
    return (BaseDataVariableTypeNode) getComponent(browseName);
  }

  @Optional
  @Override
  public CurrentStateEnumeration getCurrentState() {
    UaVariable node = getCurrentStateNode();
    if (node == null) {
      return null;
    }
    Variant value = node.getValue().getValue();
    return (CurrentStateEnumeration) value.asEnum(CurrentStateEnumeration.class);
  }

  @Optional
  @Override
  public void setCurrentState(CurrentStateEnumeration value) {
    UaVariable node = getCurrentStateNode();
    if (node == null) {
      throw new RuntimeException("Setting CurrentState failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting CurrentState failed unexpectedly", e);
    }
  }

  @Optional
  @Override
  public BaseDataVariableTypeNode getIsPanDetectedNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "IsPanDetected");
    return (BaseDataVariableTypeNode) getComponent(browseName);
  }

  @Optional
  @Override
  public Boolean isIsPanDetected() {
    UaVariable node = getIsPanDetectedNode();
    if (node == null) {
      return null;
    }
    Object value = node.getValue().getValue().getValue();
    return (Boolean) value;
  }

  @Optional
  @Override
  public void setIsPanDetected(Boolean value) {
    UaVariable node = getIsPanDetectedNode();
    if (node == null) {
      throw new RuntimeException("Setting IsPanDetected failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting IsPanDetected failed unexpectedly", e);
    }
  }

  @Mandatory
  @Override
  public AnalogItemTypeNode getNominalPowerNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "NominalPower");
    return (AnalogItemTypeNode) getComponent(browseName);
  }

  @Mandatory
  @Override
  public Integer getNominalPower() {
    UaVariable node = getNominalPowerNode();
    if (node == null) {
      throw new RuntimeException("Mandatory node NominalPower does not exist");
    }
    Object value = node.getValue().getValue().getValue();
    return (Integer) value;
  }

  @Mandatory
  @Override
  public void setNominalPower(Integer value) {
    UaVariable node = getNominalPowerNode();
    if (node == null) {
      throw new RuntimeException("Setting NominalPower failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting NominalPower failed unexpectedly", e);
    }
  }

  @Optional
  @Override
  public AnalogItemTypeNode getSetPowerValueNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "SetPowerValue");
    return (AnalogItemTypeNode) getComponent(browseName);
  }

  @Optional
  @Override
  public Integer getSetPowerValue() {
    UaVariable node = getSetPowerValueNode();
    if (node == null) {
      return null;
    }
    Object value = node.getValue().getValue().getValue();
    return (Integer) value;
  }

  @Optional
  @Override
  public void setSetPowerValue(Integer value) {
    UaVariable node = getSetPowerValueNode();
    if (node == null) {
      throw new RuntimeException("Setting SetPowerValue failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting SetPowerValue failed unexpectedly", e);
    }
  }

  @Optional
  @Override
  public AnalogItemTypeNode getSetTemperatureNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "SetTemperature");
    return (AnalogItemTypeNode) getComponent(browseName);
  }

  @Optional
  @Override
  public Float getSetTemperature() {
    UaVariable node = getSetTemperatureNode();
    if (node == null) {
      return null;
    }
    Object value = node.getValue().getValue().getValue();
    return (Float) value;
  }

  @Optional
  @Override
  public void setSetTemperature(Float value) {
    UaVariable node = getSetTemperatureNode();
    if (node == null) {
      throw new RuntimeException("Setting SetTemperature failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting SetTemperature failed unexpectedly", e);
    }
  }

  @Override
  public Variant[] callMethod(ServiceContext serviceContext, NodeId methodId,
      Variant[] inputArguments, StatusCode[] inputArgumentResults,
      DiagnosticInfo[] inputArgumentDiagnosticInfos) throws StatusException {
    return super.callMethod(serviceContext, methodId, inputArguments, inputArgumentResults, inputArgumentDiagnosticInfos);
  }
}
