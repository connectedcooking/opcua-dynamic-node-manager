// Generated by Prosys OPC UA Java SDK Codegen
//
package com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.cke.objecttypes.server;

import com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.cke.datatypes.CookingKettleModeEnumeration;
import com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.cke.datatypes.SignalModeEnumeration;
import com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.cke.objecttypes.CookingKettleParameterType;
import com.prosysopc.ua.StatusException;
import com.prosysopc.ua.TypeDefinitionId;
import com.prosysopc.ua.nodes.Mandatory;
import com.prosysopc.ua.nodes.UaNode;
import com.prosysopc.ua.nodes.UaVariable;
import com.prosysopc.ua.server.GeneratedNodeInitializer;
import com.prosysopc.ua.server.ServiceContext;
import com.prosysopc.ua.stack.builtintypes.DiagnosticInfo;
import com.prosysopc.ua.stack.builtintypes.NodeId;
import com.prosysopc.ua.stack.builtintypes.QualifiedName;
import com.prosysopc.ua.stack.builtintypes.StatusCode;
import com.prosysopc.ua.stack.builtintypes.Variant;
import com.prosysopc.ua.types.opcua.server.AnalogItemTypeNode;
import com.prosysopc.ua.types.opcua.server.BaseDataVariableTypeNode;
import java.lang.Float;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.RuntimeException;

/**
 * Generated on 2023-09-26 10:56:54
 */
@TypeDefinitionId("nsu=http://opcfoundation.org/UA/CommercialKitchenEquipment/;i=1016")
public abstract class CookingKettleParameterTypeNodeBase extends KitchenDeviceParameterTypeNode implements CookingKettleParameterType {
  private static GeneratedNodeInitializer<CookingKettleParameterTypeNode> f_cookingKettleParameterTypeNodeInitializer;

  protected CookingKettleParameterTypeNodeBase(UaNode.Parameters parameters) {
    super(parameters);
  }

  @Override
  public void afterCreate() {
    super.afterCreate();

    // Call afterCreate for each sub-node (if the node has any)
    callAfterCreateIfExists(getActualCoreTemperatureNode());
    callAfterCreateIfExists(getActualTemperatureNode());
    callAfterCreateIfExists(getCookingLevelNode());
    callAfterCreateIfExists(getProgramModeNode());
    callAfterCreateIfExists(getSetCoreTemperatureNode());
    callAfterCreateIfExists(getSetProcessTimeNode());
    callAfterCreateIfExists(getSetTemperatureNode());
    callAfterCreateIfExists(getSignalModeNode());
    callAfterCreateIfExists(getTimeRemainingNode());
    GeneratedNodeInitializer<CookingKettleParameterTypeNode> impl = getCookingKettleParameterTypeNodeInitializer();
    if(impl != null) {
      impl.init((CookingKettleParameterTypeNode)this);
    }
  }

  public static GeneratedNodeInitializer<CookingKettleParameterTypeNode> getCookingKettleParameterTypeNodeInitializer() {
    return f_cookingKettleParameterTypeNodeInitializer;
  }

  public static void setCookingKettleParameterTypeNodeInitializer(GeneratedNodeInitializer<CookingKettleParameterTypeNode> f_cookingKettleParameterTypeNodeInitializerNewValue) {
    f_cookingKettleParameterTypeNodeInitializer=f_cookingKettleParameterTypeNodeInitializerNewValue;
  }

  @Mandatory
  @Override
  public AnalogItemTypeNode getActualCoreTemperatureNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "ActualCoreTemperature");
    return (AnalogItemTypeNode) getComponent(browseName);
  }

  @Mandatory
  @Override
  public Float getActualCoreTemperature() {
    UaVariable node = getActualCoreTemperatureNode();
    if (node == null) {
      throw new RuntimeException("Mandatory node ActualCoreTemperature does not exist");
    }
    Object value = node.getValue().getValue().getValue();
    return (Float) value;
  }

  @Mandatory
  @Override
  public void setActualCoreTemperature(Float value) {
    UaVariable node = getActualCoreTemperatureNode();
    if (node == null) {
      throw new RuntimeException("Setting ActualCoreTemperature failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting ActualCoreTemperature failed unexpectedly", e);
    }
  }

  @Mandatory
  @Override
  public AnalogItemTypeNode getActualTemperatureNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "ActualTemperature");
    return (AnalogItemTypeNode) getComponent(browseName);
  }

  @Mandatory
  @Override
  public Float getActualTemperature() {
    UaVariable node = getActualTemperatureNode();
    if (node == null) {
      throw new RuntimeException("Mandatory node ActualTemperature does not exist");
    }
    Object value = node.getValue().getValue().getValue();
    return (Float) value;
  }

  @Mandatory
  @Override
  public void setActualTemperature(Float value) {
    UaVariable node = getActualTemperatureNode();
    if (node == null) {
      throw new RuntimeException("Setting ActualTemperature failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting ActualTemperature failed unexpectedly", e);
    }
  }

  @Mandatory
  @Override
  public BaseDataVariableTypeNode getCookingLevelNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "CookingLevel");
    return (BaseDataVariableTypeNode) getComponent(browseName);
  }

  @Mandatory
  @Override
  public Integer getCookingLevel() {
    UaVariable node = getCookingLevelNode();
    if (node == null) {
      throw new RuntimeException("Mandatory node CookingLevel does not exist");
    }
    Object value = node.getValue().getValue().getValue();
    return (Integer) value;
  }

  @Mandatory
  @Override
  public void setCookingLevel(Integer value) {
    UaVariable node = getCookingLevelNode();
    if (node == null) {
      throw new RuntimeException("Setting CookingLevel failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting CookingLevel failed unexpectedly", e);
    }
  }

  @Mandatory
  @Override
  public BaseDataVariableTypeNode getProgramModeNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "ProgramMode");
    return (BaseDataVariableTypeNode) getComponent(browseName);
  }

  @Mandatory
  @Override
  public CookingKettleModeEnumeration getProgramMode() {
    UaVariable node = getProgramModeNode();
    if (node == null) {
      throw new RuntimeException("Mandatory node ProgramMode does not exist");
    }
    Variant value = node.getValue().getValue();
    return (CookingKettleModeEnumeration) value.asEnum(CookingKettleModeEnumeration.class);
  }

  @Mandatory
  @Override
  public void setProgramMode(CookingKettleModeEnumeration value) {
    UaVariable node = getProgramModeNode();
    if (node == null) {
      throw new RuntimeException("Setting ProgramMode failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting ProgramMode failed unexpectedly", e);
    }
  }

  @Mandatory
  @Override
  public AnalogItemTypeNode getSetCoreTemperatureNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "SetCoreTemperature");
    return (AnalogItemTypeNode) getComponent(browseName);
  }

  @Mandatory
  @Override
  public Float getSetCoreTemperature() {
    UaVariable node = getSetCoreTemperatureNode();
    if (node == null) {
      throw new RuntimeException("Mandatory node SetCoreTemperature does not exist");
    }
    Object value = node.getValue().getValue().getValue();
    return (Float) value;
  }

  @Mandatory
  @Override
  public void setSetCoreTemperature(Float value) {
    UaVariable node = getSetCoreTemperatureNode();
    if (node == null) {
      throw new RuntimeException("Setting SetCoreTemperature failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting SetCoreTemperature failed unexpectedly", e);
    }
  }

  @Mandatory
  @Override
  public AnalogItemTypeNode getSetProcessTimeNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "SetProcessTime");
    return (AnalogItemTypeNode) getComponent(browseName);
  }

  @Mandatory
  @Override
  public Integer getSetProcessTime() {
    UaVariable node = getSetProcessTimeNode();
    if (node == null) {
      throw new RuntimeException("Mandatory node SetProcessTime does not exist");
    }
    Object value = node.getValue().getValue().getValue();
    return (Integer) value;
  }

  @Mandatory
  @Override
  public void setSetProcessTime(Integer value) {
    UaVariable node = getSetProcessTimeNode();
    if (node == null) {
      throw new RuntimeException("Setting SetProcessTime failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting SetProcessTime failed unexpectedly", e);
    }
  }

  @Mandatory
  @Override
  public AnalogItemTypeNode getSetTemperatureNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "SetTemperature");
    return (AnalogItemTypeNode) getComponent(browseName);
  }

  @Mandatory
  @Override
  public Float getSetTemperature() {
    UaVariable node = getSetTemperatureNode();
    if (node == null) {
      throw new RuntimeException("Mandatory node SetTemperature does not exist");
    }
    Object value = node.getValue().getValue().getValue();
    return (Float) value;
  }

  @Mandatory
  @Override
  public void setSetTemperature(Float value) {
    UaVariable node = getSetTemperatureNode();
    if (node == null) {
      throw new RuntimeException("Setting SetTemperature failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting SetTemperature failed unexpectedly", e);
    }
  }

  @Mandatory
  @Override
  public BaseDataVariableTypeNode getSignalModeNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "SignalMode");
    return (BaseDataVariableTypeNode) getComponent(browseName);
  }

  @Mandatory
  @Override
  public SignalModeEnumeration getSignalMode() {
    UaVariable node = getSignalModeNode();
    if (node == null) {
      throw new RuntimeException("Mandatory node SignalMode does not exist");
    }
    Variant value = node.getValue().getValue();
    return (SignalModeEnumeration) value.asEnum(SignalModeEnumeration.class);
  }

  @Mandatory
  @Override
  public void setSignalMode(SignalModeEnumeration value) {
    UaVariable node = getSignalModeNode();
    if (node == null) {
      throw new RuntimeException("Setting SignalMode failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting SignalMode failed unexpectedly", e);
    }
  }

  @Mandatory
  @Override
  public AnalogItemTypeNode getTimeRemainingNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "TimeRemaining");
    return (AnalogItemTypeNode) getComponent(browseName);
  }

  @Mandatory
  @Override
  public Integer getTimeRemaining() {
    UaVariable node = getTimeRemainingNode();
    if (node == null) {
      throw new RuntimeException("Mandatory node TimeRemaining does not exist");
    }
    Object value = node.getValue().getValue().getValue();
    return (Integer) value;
  }

  @Mandatory
  @Override
  public void setTimeRemaining(Integer value) {
    UaVariable node = getTimeRemainingNode();
    if (node == null) {
      throw new RuntimeException("Setting TimeRemaining failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting TimeRemaining failed unexpectedly", e);
    }
  }

  @Override
  public Variant[] callMethod(ServiceContext serviceContext, NodeId methodId,
      Variant[] inputArguments, StatusCode[] inputArgumentResults,
      DiagnosticInfo[] inputArgumentDiagnosticInfos) throws StatusException {
    return super.callMethod(serviceContext, methodId, inputArguments, inputArgumentResults, inputArgumentDiagnosticInfos);
  }
}
