// Generated by Prosys OPC UA Java SDK Codegen
//
package com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.cke.objecttypes.server;

import com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.cke.objecttypes.BatchInformationType;
import com.prosysopc.ua.StatusException;
import com.prosysopc.ua.TypeDefinitionId;
import com.prosysopc.ua.nodes.Mandatory;
import com.prosysopc.ua.nodes.Optional;
import com.prosysopc.ua.nodes.UaNode;
import com.prosysopc.ua.nodes.UaProperty;
import com.prosysopc.ua.nodes.UaVariable;
import com.prosysopc.ua.server.GeneratedNodeInitializer;
import com.prosysopc.ua.server.ServiceContext;
import com.prosysopc.ua.stack.builtintypes.DateTime;
import com.prosysopc.ua.stack.builtintypes.DiagnosticInfo;
import com.prosysopc.ua.stack.builtintypes.NodeId;
import com.prosysopc.ua.stack.builtintypes.QualifiedName;
import com.prosysopc.ua.stack.builtintypes.StatusCode;
import com.prosysopc.ua.stack.builtintypes.Variant;
import com.prosysopc.ua.stack.core.TimeZoneDataType;
import com.prosysopc.ua.types.opcua.server.BaseObjectTypeNode;
import java.lang.Object;
import java.lang.Override;
import java.lang.RuntimeException;
import java.lang.String;

/**
 * Generated on 2025-04-16 18:27:26
 */
@TypeDefinitionId("nsu=http://opcfoundation.org/UA/CommercialKitchenEquipment/;i=1002")
public abstract class BatchInformationTypeNodeBase extends BaseObjectTypeNode implements BatchInformationType {
  private static GeneratedNodeInitializer<BatchInformationTypeNode> f_batchInformationTypeNodeInitializer;

  protected BatchInformationTypeNodeBase(Parameters parameters) {
    super(parameters);
  }

  @Override
  public void afterCreate() {
    super.afterCreate();

    // Call afterCreate for each sub-node (if the node has any)
    GeneratedNodeInitializer<BatchInformationTypeNode> impl = getBatchInformationTypeNodeInitializer();
    if(impl != null) {
      impl.init((BatchInformationTypeNode)this);
    }
  }

  public static GeneratedNodeInitializer<BatchInformationTypeNode> getBatchInformationTypeNodeInitializer() {
    return f_batchInformationTypeNodeInitializer;
  }

  public static void setBatchInformationTypeNodeInitializer(GeneratedNodeInitializer<BatchInformationTypeNode> f_batchInformationTypeNodeInitializerNewValue) {
    f_batchInformationTypeNodeInitializer=f_batchInformationTypeNodeInitializerNewValue;
  }

  @Mandatory
  @Override
  public UaProperty getBatchIdNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "BatchId");
    return getProperty(browseName);
  }

  @Mandatory
  @Override
  public String getBatchId() {
    UaVariable node = getBatchIdNode();
    if (node == null) {
      throw new RuntimeException("Mandatory node BatchId does not exist");
    }
    Object value = node.getValue().getValue().getValue();
    return (String) value;
  }

  @Mandatory
  @Override
  public void setBatchId(String value) {
    UaVariable node = getBatchIdNode();
    if (node == null) {
      throw new RuntimeException("Setting BatchId failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting BatchId failed unexpectedly", e);
    }
  }

  @Optional
  @Override
  public UaProperty getLocalTimeNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "LocalTime");
    return getProperty(browseName);
  }

  @Optional
  @Override
  public TimeZoneDataType getLocalTime() {
    UaVariable node = getLocalTimeNode();
    if (node == null) {
      return null;
    }
    Object value = node.getValue().getValue().getValue();
    return (TimeZoneDataType) value;
  }

  @Optional
  @Override
  public void setLocalTime(TimeZoneDataType value) {
    UaVariable node = getLocalTimeNode();
    if (node == null) {
      throw new RuntimeException("Setting LocalTime failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting LocalTime failed unexpectedly", e);
    }
  }

  @Mandatory
  @Override
  public UaProperty getOrderIdNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "OrderId");
    return getProperty(browseName);
  }

  @Mandatory
  @Override
  public String getOrderId() {
    UaVariable node = getOrderIdNode();
    if (node == null) {
      throw new RuntimeException("Mandatory node OrderId does not exist");
    }
    Object value = node.getValue().getValue().getValue();
    return (String) value;
  }

  @Mandatory
  @Override
  public void setOrderId(String value) {
    UaVariable node = getOrderIdNode();
    if (node == null) {
      throw new RuntimeException("Setting OrderId failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting OrderId failed unexpectedly", e);
    }
  }

  @Mandatory
  @Override
  public UaProperty getSystemTimeNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "SystemTime");
    return getProperty(browseName);
  }

  @Mandatory
  @Override
  public DateTime getSystemTime() {
    UaVariable node = getSystemTimeNode();
    if (node == null) {
      throw new RuntimeException("Mandatory node SystemTime does not exist");
    }
    Object value = node.getValue().getValue().getValue();
    return (DateTime) value;
  }

  @Mandatory
  @Override
  public void setSystemTime(DateTime value) {
    UaVariable node = getSystemTimeNode();
    if (node == null) {
      throw new RuntimeException("Setting SystemTime failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting SystemTime failed unexpectedly", e);
    }
  }

  @Override
  public Variant[] callMethod(ServiceContext serviceContext, NodeId methodId,
      Variant[] inputArguments, StatusCode[] inputArgumentResults,
      DiagnosticInfo[] inputArgumentDiagnosticInfos) throws StatusException {
    return super.callMethod(serviceContext, methodId, inputArguments, inputArgumentResults, inputArgumentDiagnosticInfos);
  }
}
