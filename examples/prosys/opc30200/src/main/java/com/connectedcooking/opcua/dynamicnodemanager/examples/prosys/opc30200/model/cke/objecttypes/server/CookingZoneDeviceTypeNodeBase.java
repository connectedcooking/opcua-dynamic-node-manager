// Generated by Prosys OPC UA Java SDK Codegen
//
package com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.cke.objecttypes.server;

import com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.cke.datatypes.EnergySourceEnumeration;
import com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.cke.objecttypes.CookingZoneDeviceType;
import com.prosysopc.ua.StatusException;
import com.prosysopc.ua.TypeDefinitionId;
import com.prosysopc.ua.nodes.Mandatory;
import com.prosysopc.ua.nodes.UaNode;
import com.prosysopc.ua.nodes.UaProperty;
import com.prosysopc.ua.nodes.UaVariable;
import com.prosysopc.ua.server.GeneratedNodeInitializer;
import com.prosysopc.ua.server.ServiceContext;
import com.prosysopc.ua.stack.builtintypes.DiagnosticInfo;
import com.prosysopc.ua.stack.builtintypes.NodeId;
import com.prosysopc.ua.stack.builtintypes.QualifiedName;
import com.prosysopc.ua.stack.builtintypes.StatusCode;
import com.prosysopc.ua.stack.builtintypes.Variant;
import com.prosysopc.ua.types.opcua.server.AnalogItemTypeNode;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.RuntimeException;

/**
 * Generated on 2024-06-17 14:43:51
 */
@TypeDefinitionId("nsu=http://opcfoundation.org/UA/CommercialKitchenEquipment/;i=1030")
public abstract class CookingZoneDeviceTypeNodeBase extends CommercialKitchenDeviceTypeNode implements CookingZoneDeviceType {
  private static GeneratedNodeInitializer<CookingZoneDeviceTypeNode> f_cookingZoneDeviceTypeNodeInitializer;

  protected CookingZoneDeviceTypeNodeBase(UaNode.Parameters parameters) {
    super(parameters);
  }

  @Override
  public void afterCreate() {
    super.afterCreate();

    // Call afterCreate for each sub-node (if the node has any)
    callAfterCreateIfExists(getNominalVoltageNode());
    GeneratedNodeInitializer<CookingZoneDeviceTypeNode> impl = getCookingZoneDeviceTypeNodeInitializer();
    if(impl != null) {
      impl.init((CookingZoneDeviceTypeNode)this);
    }
  }

  public static GeneratedNodeInitializer<CookingZoneDeviceTypeNode> getCookingZoneDeviceTypeNodeInitializer() {
    return f_cookingZoneDeviceTypeNodeInitializer;
  }

  public static void setCookingZoneDeviceTypeNodeInitializer(GeneratedNodeInitializer<CookingZoneDeviceTypeNode> f_cookingZoneDeviceTypeNodeInitializerNewValue) {
    f_cookingZoneDeviceTypeNodeInitializer=f_cookingZoneDeviceTypeNodeInitializerNewValue;
  }

  @Mandatory
  @Override
  public UaProperty getEnergySourceNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "EnergySource");
    return getProperty(browseName);
  }

  @Mandatory
  @Override
  public EnergySourceEnumeration getEnergySource() {
    UaVariable node = getEnergySourceNode();
    if (node == null) {
      throw new RuntimeException("Mandatory node EnergySource does not exist");
    }
    Variant value = node.getValue().getValue();
    return (EnergySourceEnumeration) value.asEnum(EnergySourceEnumeration.class);
  }

  @Mandatory
  @Override
  public void setEnergySource(EnergySourceEnumeration value) {
    UaVariable node = getEnergySourceNode();
    if (node == null) {
      throw new RuntimeException("Setting EnergySource failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting EnergySource failed unexpectedly", e);
    }
  }

  @Mandatory
  @Override
  public UaProperty getIsWithPanDetectionNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "IsWithPanDetection");
    return getProperty(browseName);
  }

  @Mandatory
  @Override
  public Boolean isIsWithPanDetection() {
    UaVariable node = getIsWithPanDetectionNode();
    if (node == null) {
      throw new RuntimeException("Mandatory node IsWithPanDetection does not exist");
    }
    Object value = node.getValue().getValue().getValue();
    return (Boolean) value;
  }

  @Mandatory
  @Override
  public void setIsWithPanDetection(Boolean value) {
    UaVariable node = getIsWithPanDetectionNode();
    if (node == null) {
      throw new RuntimeException("Setting IsWithPanDetection failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting IsWithPanDetection failed unexpectedly", e);
    }
  }

  @Mandatory
  @Override
  public UaProperty getNumberOfPhasesNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "NumberOfPhases");
    return getProperty(browseName);
  }

  @Mandatory
  @Override
  public Integer getNumberOfPhases() {
    UaVariable node = getNumberOfPhasesNode();
    if (node == null) {
      throw new RuntimeException("Mandatory node NumberOfPhases does not exist");
    }
    Object value = node.getValue().getValue().getValue();
    return (Integer) value;
  }

  @Mandatory
  @Override
  public void setNumberOfPhases(Integer value) {
    UaVariable node = getNumberOfPhasesNode();
    if (node == null) {
      throw new RuntimeException("Setting NumberOfPhases failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting NumberOfPhases failed unexpectedly", e);
    }
  }

  @Mandatory
  @Override
  public AnalogItemTypeNode getNominalVoltageNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "NominalVoltage");
    return (AnalogItemTypeNode) getComponent(browseName);
  }

  @Mandatory
  @Override
  public Integer getNominalVoltage() {
    UaVariable node = getNominalVoltageNode();
    if (node == null) {
      throw new RuntimeException("Mandatory node NominalVoltage does not exist");
    }
    Object value = node.getValue().getValue().getValue();
    return (Integer) value;
  }

  @Mandatory
  @Override
  public void setNominalVoltage(Integer value) {
    UaVariable node = getNominalVoltageNode();
    if (node == null) {
      throw new RuntimeException("Setting NominalVoltage failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting NominalVoltage failed unexpectedly", e);
    }
  }

  @Override
  public Variant[] callMethod(ServiceContext serviceContext, NodeId methodId,
      Variant[] inputArguments, StatusCode[] inputArgumentResults,
      DiagnosticInfo[] inputArgumentDiagnosticInfos) throws StatusException {
    return super.callMethod(serviceContext, methodId, inputArguments, inputArgumentResults, inputArgumentDiagnosticInfos);
  }
}
