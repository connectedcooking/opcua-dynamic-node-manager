// Generated by Prosys OPC UA Java SDK Codegen
//
package com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.di.datatypes;

import com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.di.DIUaIds;
import com.prosysopc.ua.InternalUaDataTypeSpecificationMappings;
import com.prosysopc.ua.TypeDefinitionId;
import com.prosysopc.ua.UaIds;
import com.prosysopc.ua.stack.builtintypes.Structure;
import com.prosysopc.ua.typedictionary.DynamicStructure;
import com.prosysopc.ua.typedictionary.StructureSpecification;
import com.prosysopc.ua.typedictionary.UaDataTypeSpecification;
import java.lang.Override;
import java.util.function.Supplier;

/**
 * Generated on 2025-04-16 18:27:23
 */
@TypeDefinitionId("nsu=http://opcfoundation.org/UA/DI/;i=6522")
public class FetchResultDataType extends DynamicStructure {
  public static final StructureSpecification SPECIFICATION;

  static {
    StructureSpecification.Builder<Structure.Builder> b = StructureSpecification.builder();
    b.setTypeId(DIUaIds.FetchResultDataType);
    b.addSuperTypeId(UaIds.Structure);
    b.setName("FetchResultDataType");
    b.setJavaClass(FetchResultDataType.class);
    b.setAbstract(true);
    b.setStructureType(StructureSpecification.StructureType.NORMAL);
    b.setBuilderSupplier(t -> new Builder(t, () -> new FetchResultDataType(t)));
    SPECIFICATION = b.build();
    InternalUaDataTypeSpecificationMappings.put(FetchResultDataType.class, SPECIFICATION);
  }

  protected FetchResultDataType() {
    super((UaDataTypeSpecification)SPECIFICATION);
  }

  protected FetchResultDataType(UaDataTypeSpecification specification) {
    super(specification);
  }

  @Override
  public FetchResultDataType clone() {
    return (FetchResultDataType) super.clone();
  }

  @Override
  public Builder toBuilder() {
    return (Builder) super.toBuilder();
  }

  public static class Builder extends DynamicStructure.Builder {
    protected Builder(UaDataTypeSpecification specification,
        Supplier<? extends Structure> emptyInstanceSupplier) {
      super(specification, emptyInstanceSupplier);
    }

    @Override
    public FetchResultDataType build() {
      return (FetchResultDataType)super.build();
    }
  }
}
