// Generated by Prosys OPC UA Java SDK Codegen
//
package com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.di.datatypes;

import com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.di.DIIds;
import com.prosysopc.ua.TypeDefinitionId;
import com.prosysopc.ua.UaIds;
import com.prosysopc.ua.UaNodeId;
import com.prosysopc.ua.stack.builtintypes.ExpandedNodeId;
import com.prosysopc.ua.stack.builtintypes.Structure;
import com.prosysopc.ua.stack.utils.AbstractStructure;
import com.prosysopc.ua.typedictionary.FieldSpecification;
import com.prosysopc.ua.typedictionary.StructureSpecification;
import java.lang.Deprecated;
import java.lang.IllegalArgumentException;
import java.lang.Object;
import java.lang.Override;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * Generated on 2023-09-26 10:56:50
 */
@TypeDefinitionId("nsu=http://opcfoundation.org/UA/DI/;i=6522")
public abstract class FetchResultDataType extends AbstractStructure {
  @Deprecated
  public static final ExpandedNodeId ID = DIIds.FetchResultDataType;

  public static final StructureSpecification SPECIFICATION;

  static {
    StructureSpecification.Builder<Structure.Builder> b = StructureSpecification.builder();
    b.setTypeId(UaNodeId.fromLocal(ID));
    b.addSuperTypeId(UaIds.Structure);
    b.setName("FetchResultDataType");
    b.setJavaClass(FetchResultDataType.class);
    b.setStructureType(StructureSpecification.StructureType.NORMAL);
    SPECIFICATION = b.build();
  }

  public FetchResultDataType() {
  }

  @Override
  public FetchResultDataType clone() {
    FetchResultDataType result = (FetchResultDataType) super.clone();
    return result;
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null) return false;
    if (getClass() != obj.getClass()) return false;
    FetchResultDataType other = (FetchResultDataType) obj;
    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public void clear() {
    super.clear();
  }

  @Override
  @Deprecated
  public ExpandedNodeId getTypeId() {
    return ID;
  }

  @Override
  public Map<FieldSpecification, Object> toFieldsMap() {
    Map<FieldSpecification,Object> data = new LinkedHashMap<>();
    return Collections.unmodifiableMap(data);
  }

  @Override
  public StructureSpecification specification() {
    return SPECIFICATION;
  }

  @Override
  public Object get(FieldSpecification field) {
    throw new IllegalArgumentException("Unknown field: " + field);
  }

  @Override
  public void set(FieldSpecification field, Object value) {
    throw new IllegalArgumentException("Unknown field: " + field);
  }

  public abstract static class Builder extends AbstractStructure.Builder {
    protected Builder() {
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj) return true;
      if (obj == null) return false;
      if (getClass() != obj.getClass()) return false;
      Builder other = (Builder) obj;
      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public Object get(FieldSpecification field) {
      throw new IllegalArgumentException("Unknown field: " + field);
    }

    @Override
    public Builder set(FieldSpecification field, Object value) {
      throw new IllegalArgumentException("Unknown field: " + field);
    }

    @Override
    public Builder clear() {
      super.clear();
      return this;
    }

    @Override
    public StructureSpecification specification() {
      return FetchResultDataType.SPECIFICATION;
    }

    @Override
    public abstract FetchResultDataType build();
  }
}
