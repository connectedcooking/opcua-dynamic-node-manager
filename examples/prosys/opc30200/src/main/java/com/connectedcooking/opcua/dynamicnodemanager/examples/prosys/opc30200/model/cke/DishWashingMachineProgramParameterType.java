// Generated by Prosys OPC UA Java SDK Codegen
//
package com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.cke;

import com.prosysopc.ua.StatusException;
import com.prosysopc.ua.TypeDefinitionId;
import com.prosysopc.ua.nodes.Mandatory;
import com.prosysopc.ua.nodes.Optional;
import com.prosysopc.ua.nodes.UaProperty;
import com.prosysopc.ua.stack.builtintypes.UnsignedInteger;
import com.prosysopc.ua.stack.builtintypes.UnsignedShort;
import com.prosysopc.ua.types.opcua.AnalogItemType;
import com.prosysopc.ua.types.opcua.BaseDataVariableType;
import java.lang.String;
import java.util.List;

/**
 * Generated on 2022-10-10 10:21:34
 */
@TypeDefinitionId("nsu=http://opcfoundation.org/UA/CommercialKitchenEquipment/;i=1025")
public interface DishWashingMachineProgramParameterType extends KitchenDeviceParameterType {
  String PRODUCT_GROUP = "ProductGroup";

  String PRODUCT_TYPE = "ProductType";

  String ACTUAL_FINAL_RINSE_TEMPERATURE___NO__ = "ActualFinalRinseTemperature_<No.>";

  String ACTUAL_FINAL_RINSE_TEMPERATURE_NO = "ActualFinalRinseTemperatureNo";

  String ACTUAL_HYGIENE_VALUE = "ActualHygieneValue";

  String ACTUAL_MAIN_TANK_TEMPERATURE___NO__ = "ActualMainTankTemperature_<No.>";

  String ACTUAL_MAIN_TANK_TEMPERATURE_NO = "ActualMainTankTemperatureNo";

  String ACTUAL_PRE_TANK_TEMPERATURE___NO__ = "ActualPreTankTemperature_<No.>";

  String ACTUAL_PRE_TANK_TEMPERATURE_NO = "ActualPreTankTemperatureNo";

  String ACTUAL_PUMPED_FINAL_RINSE_TEMPERATURE___NO__ = "ActualPumpedFinalRinseTemperature_<No.>";

  String ACTUAL_PUMPED_FINAL_RINSE_TEMPERATURE_NO = "ActualPumpedFinalRinseTemperatureNo";

  String FINAL_RINSE_TEMPERATURE_SETPOINT___NO__ = "FinalRinseTemperatureSetpoint_<No.>";

  String FINAL_RINSE_TEMPERATURE_SETPOINT_NO = "FinalRinseTemperatureSetpointNo";

  String HYGIENE_MODE = "HygieneMode";

  String HYGIENE_SETPOINT = "HygieneSetpoint";

  String MAIN_TANK_TEMPERATURE_SETPOINT___NO__ = "MainTankTemperatureSetpoint_<No.>";

  String MAIN_TANK_TEMPERATURE_SETPOINT_NO = "MainTankTemperatureSetpointNo";

  String OPERATION_MODE = "OperationMode";

  String PRE_TANK_TEMPERATURE_SETPOINT___NO__ = "PreTankTemperatureSetpoint_<No.>";

  String PRE_TANK_TEMPERATURE_SETPOINT_NO = "PreTankTemperatureSetpointNo";

  String PROGRAM_MODE = "ProgramMode";

  String PUMPED_FINAL_RINSE_TEMPERATURE_SETPOINT___NO__ = "PumpedFinalRinseTemperatureSetpoint_<No.>";

  String PUMPED_FINAL_RINSE_TEMPERATURE_SETPOINT_NO = "PumpedFinalRinseTemperatureSetpointNo";

  @Optional
  UaProperty getProductGroupNode();

  @Optional
  String getProductGroup();

  @Optional
  void setProductGroup(String value) throws StatusException;

  @Optional
  UaProperty getProductTypeNode();

  @Optional
  UnsignedInteger getProductType();

  @Optional
  void setProductType(UnsignedInteger value) throws StatusException;

  List<? extends AnalogItemType> getActualFinalRinseTemperature__No__Nodes();

  @Mandatory
  BaseDataVariableType getActualFinalRinseTemperatureNoNode();

  @Mandatory
  UnsignedShort getActualFinalRinseTemperatureNo();

  @Mandatory
  void setActualFinalRinseTemperatureNo(UnsignedShort value) throws StatusException;

  @Optional
  BaseDataVariableType getActualHygieneValueNode();

  @Optional
  UnsignedShort getActualHygieneValue();

  @Optional
  void setActualHygieneValue(UnsignedShort value) throws StatusException;

  List<? extends AnalogItemType> getActualMainTankTemperature__No__Nodes();

  @Mandatory
  BaseDataVariableType getActualMainTankTemperatureNoNode();

  @Mandatory
  UnsignedShort getActualMainTankTemperatureNo();

  @Mandatory
  void setActualMainTankTemperatureNo(UnsignedShort value) throws StatusException;

  List<? extends AnalogItemType> getActualPreTankTemperature__No__Nodes();

  @Mandatory
  BaseDataVariableType getActualPreTankTemperatureNoNode();

  @Mandatory
  UnsignedShort getActualPreTankTemperatureNo();

  @Mandatory
  void setActualPreTankTemperatureNo(UnsignedShort value) throws StatusException;

  List<? extends AnalogItemType> getActualPumpedFinalRinseTemperature__No__Nodes();

  @Mandatory
  BaseDataVariableType getActualPumpedFinalRinseTemperatureNoNode();

  @Mandatory
  UnsignedShort getActualPumpedFinalRinseTemperatureNo();

  @Mandatory
  void setActualPumpedFinalRinseTemperatureNo(UnsignedShort value) throws StatusException;

  List<? extends AnalogItemType> getFinalRinseTemperatureSetpoint__No__Nodes();

  @Mandatory
  BaseDataVariableType getFinalRinseTemperatureSetpointNoNode();

  @Mandatory
  UnsignedShort getFinalRinseTemperatureSetpointNo();

  @Mandatory
  void setFinalRinseTemperatureSetpointNo(UnsignedShort value) throws StatusException;

  @Optional
  BaseDataVariableType getHygieneModeNode();

  @Optional
  HygieneModeEnumeration getHygieneMode();

  @Optional
  void setHygieneMode(HygieneModeEnumeration value) throws StatusException;

  @Optional
  BaseDataVariableType getHygieneSetpointNode();

  @Optional
  UnsignedShort getHygieneSetpoint();

  @Optional
  void setHygieneSetpoint(UnsignedShort value) throws StatusException;

  List<? extends AnalogItemType> getMainTankTemperatureSetpoint__No__Nodes();

  @Mandatory
  BaseDataVariableType getMainTankTemperatureSetpointNoNode();

  @Mandatory
  UnsignedShort getMainTankTemperatureSetpointNo();

  @Mandatory
  void setMainTankTemperatureSetpointNo(UnsignedShort value) throws StatusException;

  @Mandatory
  BaseDataVariableType getOperationModeNode();

  @Mandatory
  OperationModeEnumeration getOperationMode();

  @Mandatory
  void setOperationMode(OperationModeEnumeration value) throws StatusException;

  List<? extends AnalogItemType> getPreTankTemperatureSetpoint__No__Nodes();

  @Mandatory
  BaseDataVariableType getPreTankTemperatureSetpointNoNode();

  @Mandatory
  UnsignedShort getPreTankTemperatureSetpointNo();

  @Mandatory
  void setPreTankTemperatureSetpointNo(UnsignedShort value) throws StatusException;

  @Optional
  BaseDataVariableType getProgramModeNode();

  @Optional
  ProgramModeEnumeration getProgramMode();

  @Optional
  void setProgramMode(ProgramModeEnumeration value) throws StatusException;

  List<? extends AnalogItemType> getPumpedFinalRinseTemperatureSetpoint__No__Nodes();

  @Mandatory
  BaseDataVariableType getPumpedFinalRinseTemperatureSetpointNoNode();

  @Mandatory
  UnsignedShort getPumpedFinalRinseTemperatureSetpointNo();

  @Mandatory
  void setPumpedFinalRinseTemperatureSetpointNo(UnsignedShort value) throws StatusException;
}
