// Generated by Prosys OPC UA Java SDK Codegen
//
package com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.cke.objecttypes;

import com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.cke.datatypes.PressureCookingKettleModeEnumeration;
import com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.cke.datatypes.SignalModeEnumeration;
import com.prosysopc.ua.StatusException;
import com.prosysopc.ua.TypeDefinitionId;
import com.prosysopc.ua.nodes.Mandatory;
import com.prosysopc.ua.nodes.Optional;
import com.prosysopc.ua.types.opcua.AnalogItemType;
import com.prosysopc.ua.types.opcua.BaseDataVariableType;
import java.lang.Boolean;
import java.lang.Float;
import java.lang.Integer;
import java.lang.String;

/**
 * Generated on 2024-09-09 10:35:47
 */
@TypeDefinitionId("nsu=http://opcfoundation.org/UA/CommercialKitchenEquipment/;i=1014")
public interface PressureCookingKettleParameterType extends KitchenDeviceParameterType {
  String ACTUAL_CORE_TEMPERATURE = "ActualCoreTemperature";

  String ACTUAL_PRESSURE_ABSOLUTE = "ActualPressureAbsolute";

  String ACTUAL_PRESSURE_KETTLE = "ActualPressureKettle";

  String ACTUAL_TEMPERATURE = "ActualTemperature";

  String COOKING_LEVEL = "CookingLevel";

  String IS_LID_LOCKED = "IsLidLocked";

  String IS_OPEN_EXPRESS_ACTIVE = "IsOpenExpressActive";

  String IS_STEAM_ACTIVE = "IsSteamActive";

  String PROGRAM_MODE = "ProgramMode";

  String SET_CORE_TEMPERATURE = "SetCoreTemperature";

  String SET_PROCESS_TIME = "SetProcessTime";

  String SET_TEMPERATURE = "SetTemperature";

  String SIGNAL_MODE = "SignalMode";

  String TIME_REMAINING = "TimeRemaining";

  @Mandatory
  AnalogItemType getActualCoreTemperatureNode();

  @Mandatory
  Float getActualCoreTemperature();

  @Mandatory
  void setActualCoreTemperature(Float value) throws StatusException;

  @Mandatory
  AnalogItemType getActualPressureAbsoluteNode();

  @Mandatory
  Float getActualPressureAbsolute();

  @Mandatory
  void setActualPressureAbsolute(Float value) throws StatusException;

  @Mandatory
  AnalogItemType getActualPressureKettleNode();

  @Mandatory
  Float getActualPressureKettle();

  @Mandatory
  void setActualPressureKettle(Float value) throws StatusException;

  @Mandatory
  AnalogItemType getActualTemperatureNode();

  @Mandatory
  Float getActualTemperature();

  @Mandatory
  void setActualTemperature(Float value) throws StatusException;

  @Mandatory
  BaseDataVariableType getCookingLevelNode();

  @Mandatory
  Integer getCookingLevel();

  @Mandatory
  void setCookingLevel(Integer value) throws StatusException;

  @Mandatory
  BaseDataVariableType getIsLidLockedNode();

  @Mandatory
  Boolean isIsLidLocked();

  @Mandatory
  void setIsLidLocked(Boolean value) throws StatusException;

  @Optional
  BaseDataVariableType getIsOpenExpressActiveNode();

  @Optional
  Boolean isIsOpenExpressActive();

  @Optional
  void setIsOpenExpressActive(Boolean value) throws StatusException;

  @Mandatory
  BaseDataVariableType getIsSteamActiveNode();

  @Mandatory
  Boolean isIsSteamActive();

  @Mandatory
  void setIsSteamActive(Boolean value) throws StatusException;

  @Mandatory
  BaseDataVariableType getProgramModeNode();

  @Mandatory
  PressureCookingKettleModeEnumeration getProgramMode();

  @Mandatory
  void setProgramMode(PressureCookingKettleModeEnumeration value) throws StatusException;

  @Mandatory
  AnalogItemType getSetCoreTemperatureNode();

  @Mandatory
  Float getSetCoreTemperature();

  @Mandatory
  void setSetCoreTemperature(Float value) throws StatusException;

  @Mandatory
  AnalogItemType getSetProcessTimeNode();

  @Mandatory
  Integer getSetProcessTime();

  @Mandatory
  void setSetProcessTime(Integer value) throws StatusException;

  @Mandatory
  AnalogItemType getSetTemperatureNode();

  @Mandatory
  Float getSetTemperature();

  @Mandatory
  void setSetTemperature(Float value) throws StatusException;

  @Mandatory
  BaseDataVariableType getSignalModeNode();

  @Mandatory
  SignalModeEnumeration getSignalMode();

  @Mandatory
  void setSignalMode(SignalModeEnumeration value) throws StatusException;

  @Mandatory
  AnalogItemType getTimeRemainingNode();

  @Mandatory
  Integer getTimeRemaining();

  @Mandatory
  void setTimeRemaining(Integer value) throws StatusException;
}
