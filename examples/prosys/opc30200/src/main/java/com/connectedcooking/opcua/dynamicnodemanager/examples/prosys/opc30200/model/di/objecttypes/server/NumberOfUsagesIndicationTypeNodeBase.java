// Generated by Prosys OPC UA Java SDK Codegen
//
package com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.di.objecttypes.server;

import com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.di.objecttypes.NumberOfUsagesIndicationType;
import com.prosysopc.ua.StatusException;
import com.prosysopc.ua.TypeDefinitionId;
import com.prosysopc.ua.nodes.UaNode;
import com.prosysopc.ua.server.GeneratedNodeInitializer;
import com.prosysopc.ua.server.ServiceContext;
import com.prosysopc.ua.stack.builtintypes.DiagnosticInfo;
import com.prosysopc.ua.stack.builtintypes.NodeId;
import com.prosysopc.ua.stack.builtintypes.StatusCode;
import com.prosysopc.ua.stack.builtintypes.Variant;
import java.lang.Override;

/**
 * Indicates counting the process steps the entity has been used or can still be used for (for example usages of a punching tool).
 * <p>
 * Generated on 2025-04-16 18:27:23
 */
@TypeDefinitionId("nsu=http://opcfoundation.org/UA/DI/;i=476")
public abstract class NumberOfUsagesIndicationTypeNodeBase extends BaseLifetimeIndicationTypeNode implements NumberOfUsagesIndicationType {
  private static GeneratedNodeInitializer<NumberOfUsagesIndicationTypeNode> f_numberOfUsagesIndicationTypeNodeInitializer;

  protected NumberOfUsagesIndicationTypeNodeBase(Parameters parameters) {
    super(parameters);
  }

  @Override
  public void afterCreate() {
    super.afterCreate();

    // Call afterCreate for each sub-node (if the node has any)
    GeneratedNodeInitializer<NumberOfUsagesIndicationTypeNode> impl = getNumberOfUsagesIndicationTypeNodeInitializer();
    if(impl != null) {
      impl.init((NumberOfUsagesIndicationTypeNode)this);
    }
  }

  public static GeneratedNodeInitializer<NumberOfUsagesIndicationTypeNode> getNumberOfUsagesIndicationTypeNodeInitializer() {
    return f_numberOfUsagesIndicationTypeNodeInitializer;
  }

  public static void setNumberOfUsagesIndicationTypeNodeInitializer(GeneratedNodeInitializer<NumberOfUsagesIndicationTypeNode> f_numberOfUsagesIndicationTypeNodeInitializerNewValue) {
    f_numberOfUsagesIndicationTypeNodeInitializer=f_numberOfUsagesIndicationTypeNodeInitializerNewValue;
  }

  @Override
  public Variant[] callMethod(ServiceContext serviceContext, NodeId methodId,
      Variant[] inputArguments, StatusCode[] inputArgumentResults,
      DiagnosticInfo[] inputArgumentDiagnosticInfos) throws StatusException {
    return super.callMethod(serviceContext, methodId, inputArguments, inputArgumentResults, inputArgumentDiagnosticInfos);
  }
}
