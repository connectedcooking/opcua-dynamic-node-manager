// Generated by Prosys OPC UA Java SDK Codegen
//
package com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.di.datatypes;

import com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.di.DIUaIds;
import com.prosysopc.ua.InternalUaDataTypeSpecificationMappings;
import com.prosysopc.ua.TypeDefinitionId;
import com.prosysopc.ua.UaArrayDimensions;
import com.prosysopc.ua.UaIds;
import com.prosysopc.ua.UaNodeId;
import com.prosysopc.ua.stack.builtintypes.DiagnosticInfo;
import com.prosysopc.ua.stack.builtintypes.Structure;
import com.prosysopc.ua.stack.utils.InternalStructureUtils;
import com.prosysopc.ua.stack.utils.MultiDimensionArrayUtils;
import com.prosysopc.ua.typedictionary.FieldSpecification;
import com.prosysopc.ua.typedictionary.StructureSpecification;
import com.prosysopc.ua.typedictionary.UaDataTypeSpecification;
import java.lang.Class;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.function.Supplier;

/**
 * Generated on 2025-04-16 18:27:23
 */
@TypeDefinitionId("nsu=http://opcfoundation.org/UA/DI/;i=15888")
public class TransferResultErrorDataType extends FetchResultDataType {
  public static final StructureSpecification SPECIFICATION;

  static {
    StructureSpecification.Builder<Structure.Builder> b = StructureSpecification.builder();
    b.addField(Fields.Status);
    b.addField(Fields.Diagnostics);
    b.setBinaryEncodeId(DIUaIds.TransferResultErrorDataType_DefaultBinary);
    b.setXmlEncodeId(DIUaIds.TransferResultErrorDataType_DefaultXml);
    b.setJsonEncodeId(DIUaIds.TransferResultErrorDataType_DefaultJson);
    b.setTypeId(DIUaIds.TransferResultErrorDataType);
    b.addSuperTypeId(UaIds.Structure);
    b.addSuperTypeId(DIUaIds.FetchResultDataType);
    b.setName("TransferResultErrorDataType");
    b.setJavaClass(TransferResultErrorDataType.class);
    b.setAbstract(false);
    b.setStructureType(StructureSpecification.StructureType.NORMAL);
    b.setBuilderSupplier(t -> new Builder(t, () -> new TransferResultErrorDataType(t)));
    SPECIFICATION = b.build();
    InternalUaDataTypeSpecificationMappings.put(TransferResultErrorDataType.class, SPECIFICATION);
  }

  public TransferResultErrorDataType() {
    super((UaDataTypeSpecification)SPECIFICATION);
  }

  protected TransferResultErrorDataType(UaDataTypeSpecification specification) {
    super(specification);
  }

  public TransferResultErrorDataType(Integer f_status, DiagnosticInfo f_diagnostics) {
    super((UaDataTypeSpecification)SPECIFICATION);
    this.setStatus(f_status);
    this.setDiagnostics(f_diagnostics);
  }

  public Integer getStatus() {
    return this.indexGet(0);
  }

  public void setStatus(Integer value) {
    this.indexSet(value, 0);
  }

  public DiagnosticInfo getDiagnostics() {
    return this.indexGet(1);
  }

  public void setDiagnostics(DiagnosticInfo value) {
    this.indexSet(value, 1);
  }

  @Override
  public TransferResultErrorDataType clone() {
    return (TransferResultErrorDataType) super.clone();
  }

  public static Builder builder() {
    return new Builder(SPECIFICATION, () -> new TransferResultErrorDataType());
  }

  @Override
  public Builder toBuilder() {
    return (Builder) super.toBuilder();
  }

  public enum Fields implements FieldSpecification {
    Status(0, "Status", Integer.class, false, UaIds.Int32, -1, null, false, 0),

    Diagnostics(1, "Diagnostics", DiagnosticInfo.class, false, UaIds.DiagnosticInfo, -1, null, false, 0);

    private final int fieldIndex;

    private final String name;

    private final Class<?> javaClass;

    private final boolean isOptional;

    private final UaNodeId dataTypeId;

    private final int valueRank;

    private final UaArrayDimensions arrayDimensions;

    private final boolean allowSubTypes;

    private final int javaClassDimensions;

    private final Class<?> compositeClass;

    private final UaNodeId encodeTypeId;

    Fields(int fieldIndex, String name, Class<?> javaClass, boolean isOptional, UaNodeId dataTypeId,
        int valueRank, UaArrayDimensions arrayDimensions, boolean allowSubTypes,
        int javaClassDimensions) {
      this.fieldIndex = fieldIndex;
      this.name = name;
      this.javaClass = javaClass;
      this.isOptional = isOptional;
      this.dataTypeId = dataTypeId;
      this.valueRank = valueRank;
      this.arrayDimensions = arrayDimensions;
      this.allowSubTypes = allowSubTypes;
      this.javaClassDimensions = javaClassDimensions;
      this.compositeClass = MultiDimensionArrayUtils.getComponentType(javaClass);
      this.encodeTypeId = InternalStructureUtils.encodeTypeFor(this.compositeClass, allowSubTypes, dataTypeId);
    }

    @Override
    public UaArrayDimensions getArrayDimensions() {
      return arrayDimensions;
    }

    @Override
    public Class<?> getCompositeClass() {
      return compositeClass;
    }

    @Override
    public UaNodeId getDataTypeId() {
      return dataTypeId;
    }

    @Override
    public String getDescription() {
      return null;
    }

    @Override
    public UaNodeId getEncodeTypeId() {
      return encodeTypeId;
    }

    @Override
    public int getFieldIndex() {
      return fieldIndex;
    }

    @Override
    public Class<?> getJavaClass() {
      return javaClass;
    }

    @Override
    public int getJavaClassDimensions() {
      return javaClassDimensions;
    }

    @Override
    public int getMaxStringLength() {
      return 0;
    }

    @Override
    public String getName() {
      return name;
    }

    @Override
    public int getValueRank() {
      return valueRank;
    }

    @Override
    public boolean isAllowSubTypes() {
      return allowSubTypes;
    }

    @Override
    public boolean isArray() {
      return javaClassDimensions != 0;
    }

    @Override
    public boolean isOptional() {
      return isOptional;
    }
  }

  public static class Builder extends FetchResultDataType.Builder {
    protected Builder(UaDataTypeSpecification specification,
        Supplier<? extends Structure> emptyInstanceSupplier) {
      super(specification, emptyInstanceSupplier);
    }

    public Integer getStatus() {
      return this.indexGet(0);
    }

    public Builder setStatus(Integer value) {
      this.indexSet(value, 0);
      return this;
    }

    public DiagnosticInfo getDiagnostics() {
      return this.indexGet(1);
    }

    public Builder setDiagnostics(DiagnosticInfo value) {
      this.indexSet(value, 1);
      return this;
    }

    @Override
    public TransferResultErrorDataType build() {
      return (TransferResultErrorDataType)super.build();
    }
  }
}
