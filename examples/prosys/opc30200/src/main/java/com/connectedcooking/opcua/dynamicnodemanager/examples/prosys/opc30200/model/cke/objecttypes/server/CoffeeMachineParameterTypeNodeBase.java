// Generated by Prosys OPC UA Java SDK Codegen
//
package com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.cke.objecttypes.server;

import com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.cke.datatypes.CoffeeMachineModeEnumeration;
import com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.cke.objecttypes.CoffeeMachineParameterType;
import com.prosysopc.ua.StatusException;
import com.prosysopc.ua.TypeDefinitionId;
import com.prosysopc.ua.nodes.Mandatory;
import com.prosysopc.ua.nodes.Optional;
import com.prosysopc.ua.nodes.UaNode;
import com.prosysopc.ua.nodes.UaVariable;
import com.prosysopc.ua.server.GeneratedNodeInitializer;
import com.prosysopc.ua.server.ServiceContext;
import com.prosysopc.ua.stack.builtintypes.DateTime;
import com.prosysopc.ua.stack.builtintypes.DiagnosticInfo;
import com.prosysopc.ua.stack.builtintypes.ExpandedNodeId;
import com.prosysopc.ua.stack.builtintypes.NodeId;
import com.prosysopc.ua.stack.builtintypes.QualifiedName;
import com.prosysopc.ua.stack.builtintypes.StatusCode;
import com.prosysopc.ua.stack.builtintypes.UnsignedLong;
import com.prosysopc.ua.stack.builtintypes.Variant;
import com.prosysopc.ua.types.opcua.AnalogItemType;
import com.prosysopc.ua.types.opcua.BaseDataVariableType;
import com.prosysopc.ua.types.opcua.server.AnalogItemTypeNode;
import com.prosysopc.ua.types.opcua.server.BaseDataVariableTypeNode;
import java.lang.Float;
import java.lang.Object;
import java.lang.Override;
import java.lang.RuntimeException;
import java.util.List;

/**
 * Generated on 2025-04-16 18:27:26
 */
@TypeDefinitionId("nsu=http://opcfoundation.org/UA/CommercialKitchenEquipment/;i=1022")
public abstract class CoffeeMachineParameterTypeNodeBase extends KitchenDeviceParameterTypeNode implements CoffeeMachineParameterType {
  private static GeneratedNodeInitializer<CoffeeMachineParameterTypeNode> f_coffeeMachineParameterTypeNodeInitializer;

  protected CoffeeMachineParameterTypeNodeBase(Parameters parameters) {
    super(parameters);
  }

  @Override
  public void afterCreate() {
    super.afterCreate();

    // Call afterCreate for each sub-node (if the node has any)
    callAfterCreateIfExists(getBoilerPressureSteamNode());
    callAfterCreateIfExists(getBoilerPressureWaterNode());
    callAfterCreateIfExists(getBoilerTempSteamNode());
    callAfterCreateIfExists(getBoilerTempWaterNode());
    callAfterCreateIfExists(getCurrentStateNode());
    callAfterCreateIfExists(getSystemCleanNode());
    callAfterCreateIfExists(getTotalMixNode());
    GeneratedNodeInitializer<CoffeeMachineParameterTypeNode> impl = getCoffeeMachineParameterTypeNodeInitializer();
    if(impl != null) {
      impl.init((CoffeeMachineParameterTypeNode)this);
    }
  }

  public static GeneratedNodeInitializer<CoffeeMachineParameterTypeNode> getCoffeeMachineParameterTypeNodeInitializer() {
    return f_coffeeMachineParameterTypeNodeInitializer;
  }

  public static void setCoffeeMachineParameterTypeNodeInitializer(GeneratedNodeInitializer<CoffeeMachineParameterTypeNode> f_coffeeMachineParameterTypeNodeInitializerNewValue) {
    f_coffeeMachineParameterTypeNodeInitializer=f_coffeeMachineParameterTypeNodeInitializerNewValue;
  }

  @Mandatory
  @Override
  public AnalogItemTypeNode getBoilerPressureSteamNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "BoilerPressureSteam");
    return (AnalogItemTypeNode) getComponent(browseName);
  }

  @Mandatory
  @Override
  public Float getBoilerPressureSteam() {
    UaVariable node = getBoilerPressureSteamNode();
    if (node == null) {
      throw new RuntimeException("Mandatory node BoilerPressureSteam does not exist");
    }
    Object value = node.getValue().getValue().getValue();
    return (Float) value;
  }

  @Mandatory
  @Override
  public void setBoilerPressureSteam(Float value) {
    UaVariable node = getBoilerPressureSteamNode();
    if (node == null) {
      throw new RuntimeException("Setting BoilerPressureSteam failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting BoilerPressureSteam failed unexpectedly", e);
    }
  }

  @Mandatory
  @Override
  public AnalogItemTypeNode getBoilerPressureWaterNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "BoilerPressureWater");
    return (AnalogItemTypeNode) getComponent(browseName);
  }

  @Mandatory
  @Override
  public Float getBoilerPressureWater() {
    UaVariable node = getBoilerPressureWaterNode();
    if (node == null) {
      throw new RuntimeException("Mandatory node BoilerPressureWater does not exist");
    }
    Object value = node.getValue().getValue().getValue();
    return (Float) value;
  }

  @Mandatory
  @Override
  public void setBoilerPressureWater(Float value) {
    UaVariable node = getBoilerPressureWaterNode();
    if (node == null) {
      throw new RuntimeException("Setting BoilerPressureWater failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting BoilerPressureWater failed unexpectedly", e);
    }
  }

  @Optional
  @Override
  public AnalogItemTypeNode getBoilerTempSteamNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "BoilerTempSteam");
    return (AnalogItemTypeNode) getComponent(browseName);
  }

  @Optional
  @Override
  public Float getBoilerTempSteam() {
    UaVariable node = getBoilerTempSteamNode();
    if (node == null) {
      return null;
    }
    Object value = node.getValue().getValue().getValue();
    return (Float) value;
  }

  @Optional
  @Override
  public void setBoilerTempSteam(Float value) {
    UaVariable node = getBoilerTempSteamNode();
    if (node == null) {
      throw new RuntimeException("Setting BoilerTempSteam failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting BoilerTempSteam failed unexpectedly", e);
    }
  }

  @Mandatory
  @Override
  public AnalogItemTypeNode getBoilerTempWaterNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "BoilerTempWater");
    return (AnalogItemTypeNode) getComponent(browseName);
  }

  @Mandatory
  @Override
  public Float getBoilerTempWater() {
    UaVariable node = getBoilerTempWaterNode();
    if (node == null) {
      throw new RuntimeException("Mandatory node BoilerTempWater does not exist");
    }
    Object value = node.getValue().getValue().getValue();
    return (Float) value;
  }

  @Mandatory
  @Override
  public void setBoilerTempWater(Float value) {
    UaVariable node = getBoilerTempWaterNode();
    if (node == null) {
      throw new RuntimeException("Setting BoilerTempWater failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting BoilerTempWater failed unexpectedly", e);
    }
  }

  @Mandatory
  @Override
  public BaseDataVariableTypeNode getCurrentStateNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "CurrentState");
    return (BaseDataVariableTypeNode) getComponent(browseName);
  }

  @Mandatory
  @Override
  public CoffeeMachineModeEnumeration getCurrentState() {
    UaVariable node = getCurrentStateNode();
    if (node == null) {
      throw new RuntimeException("Mandatory node CurrentState does not exist");
    }
    Variant value = node.getValue().getValue();
    return (CoffeeMachineModeEnumeration) value.asEnum(CoffeeMachineModeEnumeration.class);
  }

  @Mandatory
  @Override
  public void setCurrentState(CoffeeMachineModeEnumeration value) {
    UaVariable node = getCurrentStateNode();
    if (node == null) {
      throw new RuntimeException("Setting CurrentState failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting CurrentState failed unexpectedly", e);
    }
  }

  public List<? extends AnalogItemType> getGrinderRuntime__No__Nodes() {
    ExpandedNodeId placheholderId = ExpandedNodeId.parseExpandedNodeId("nsu=http://opcfoundation.org/UA/CommercialKitchenEquipment/;i=6378");
    ExpandedNodeId referenceTypeId = ExpandedNodeId.parseExpandedNodeId("nsu=http://opcfoundation.org/UA/;i=47");
    return findPlaceholders(AnalogItemType.class, placheholderId, referenceTypeId);
  }

  @Mandatory
  @Override
  public BaseDataVariableTypeNode getSystemCleanNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "SystemClean");
    return (BaseDataVariableTypeNode) getComponent(browseName);
  }

  @Mandatory
  @Override
  public DateTime getSystemClean() {
    UaVariable node = getSystemCleanNode();
    if (node == null) {
      throw new RuntimeException("Mandatory node SystemClean does not exist");
    }
    Object value = node.getValue().getValue().getValue();
    return (DateTime) value;
  }

  @Mandatory
  @Override
  public void setSystemClean(DateTime value) {
    UaVariable node = getSystemCleanNode();
    if (node == null) {
      throw new RuntimeException("Setting SystemClean failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting SystemClean failed unexpectedly", e);
    }
  }

  public List<? extends BaseDataVariableType> getTotalBrew__No__Nodes() {
    ExpandedNodeId placheholderId = ExpandedNodeId.parseExpandedNodeId("nsu=http://opcfoundation.org/UA/CommercialKitchenEquipment/;i=6376");
    ExpandedNodeId referenceTypeId = ExpandedNodeId.parseExpandedNodeId("nsu=http://opcfoundation.org/UA/;i=47");
    return findPlaceholders(BaseDataVariableType.class, placheholderId, referenceTypeId);
  }

  @Mandatory
  @Override
  public BaseDataVariableTypeNode getTotalMixNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "TotalMix");
    return (BaseDataVariableTypeNode) getComponent(browseName);
  }

  @Mandatory
  @Override
  public UnsignedLong getTotalMix() {
    UaVariable node = getTotalMixNode();
    if (node == null) {
      throw new RuntimeException("Mandatory node TotalMix does not exist");
    }
    Object value = node.getValue().getValue().getValue();
    return (UnsignedLong) value;
  }

  @Mandatory
  @Override
  public void setTotalMix(UnsignedLong value) {
    UaVariable node = getTotalMixNode();
    if (node == null) {
      throw new RuntimeException("Setting TotalMix failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting TotalMix failed unexpectedly", e);
    }
  }

  public void setTotalMix(long value) {
    setTotalMix(UnsignedLong.valueOf(value));
  }

  @Override
  public Variant[] callMethod(ServiceContext serviceContext, NodeId methodId,
      Variant[] inputArguments, StatusCode[] inputArgumentResults,
      DiagnosticInfo[] inputArgumentDiagnosticInfos) throws StatusException {
    return super.callMethod(serviceContext, methodId, inputArguments, inputArgumentResults, inputArgumentDiagnosticInfos);
  }
}
