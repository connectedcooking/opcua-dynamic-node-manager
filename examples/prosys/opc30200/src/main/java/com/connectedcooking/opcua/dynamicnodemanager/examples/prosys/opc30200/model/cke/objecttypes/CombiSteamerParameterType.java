// Generated by Prosys OPC UA Java SDK Codegen
//
package com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.cke.objecttypes;

import com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.cke.datatypes.CombiSteamerModeEnumeration;
import com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.cke.datatypes.SpecialCookingModeEnumeration;
import com.prosysopc.ua.StatusException;
import com.prosysopc.ua.TypeDefinitionId;
import com.prosysopc.ua.nodes.Mandatory;
import com.prosysopc.ua.nodes.Optional;
import com.prosysopc.ua.types.opcua.AnalogItemType;
import com.prosysopc.ua.types.opcua.BaseDataVariableType;
import java.lang.Boolean;
import java.lang.Float;
import java.lang.Integer;
import java.lang.String;
import java.util.List;

/**
 * Generated on 2024-06-17 14:43:51
 */
@TypeDefinitionId("nsu=http://opcfoundation.org/UA/CommercialKitchenEquipment/;i=1010")
public interface CombiSteamerParameterType extends KitchenDeviceParameterType {
  String ACTUAL_EXTERNAL_CORE_TEMPERATURE___NO__ = "ActualExternalCoreTemperature_<No.>";

  String ACTUAL_HUMIDITY = "ActualHumidity";

  String ACTUAL_INTERNAL_CORE_TEMPERATURE___NO__ = "ActualInternalCoreTemperature_<No.>";

  String ACTUAL_TEMPERATURE_CHAMBER___NO__ = "ActualTemperatureChamber_<No.>";

  String COMBI_STEAMER_MODE = "CombiSteamerMode";

  String IS_DOOR_OPEN = "IsDoorOpen";

  String IS_ENERGY_SAVING_ACTIVE = "IsEnergySavingActive";

  String IS_LOA_ACTIVE = "IsLoaActive";

  String IS_STEAM_EXHAUST_SYSTEM_ACTIVE = "IsSteamExhaustSystemActive";

  String SET_EXTERNAL_CORE_TEMPERATURE = "SetExternalCoreTemperature";

  String SET_HUMIDITY = "SetHumidity";

  String SET_INTERNAL_CORE_TEMPERATURE = "SetInternalCoreTemperature";

  String SET_PROCESS_TIME_PROGRAM = "SetProcessTimeProgram";

  String SET_PROCESS_TIME_STEP = "SetProcessTimeStep";

  String SET_TEMPERATURE = "SetTemperature";

  String SPECIAL_COOKING_MODE = "SpecialCookingMode";

  String TIME_REMAINING_PROGRAM = "TimeRemainingProgram";

  String TIME_REMAINING_STEP = "TimeRemainingStep";

  List<? extends AnalogItemType> getActualExternalCoreTemperature__No__Nodes();

  @Optional
  AnalogItemType getActualHumidityNode();

  @Optional
  Integer getActualHumidity();

  @Optional
  void setActualHumidity(Integer value) throws StatusException;

  List<? extends AnalogItemType> getActualInternalCoreTemperature__No__Nodes();

  List<? extends AnalogItemType> getActualTemperatureChamber__No__Nodes();

  @Mandatory
  BaseDataVariableType getCombiSteamerModeNode();

  @Mandatory
  CombiSteamerModeEnumeration getCombiSteamerMode();

  @Mandatory
  void setCombiSteamerMode(CombiSteamerModeEnumeration value) throws StatusException;

  @Mandatory
  BaseDataVariableType getIsDoorOpenNode();

  @Mandatory
  Boolean isIsDoorOpen();

  @Mandatory
  void setIsDoorOpen(Boolean value) throws StatusException;

  @Optional
  BaseDataVariableType getIsEnergySavingActiveNode();

  @Optional
  Boolean isIsEnergySavingActive();

  @Optional
  void setIsEnergySavingActive(Boolean value) throws StatusException;

  @Optional
  BaseDataVariableType getIsLoaActiveNode();

  @Optional
  Boolean isIsLoaActive();

  @Optional
  void setIsLoaActive(Boolean value) throws StatusException;

  @Optional
  BaseDataVariableType getIsSteamExhaustSystemActiveNode();

  @Optional
  Boolean isIsSteamExhaustSystemActive();

  @Optional
  void setIsSteamExhaustSystemActive(Boolean value) throws StatusException;

  @Optional
  AnalogItemType getSetExternalCoreTemperatureNode();

  @Optional
  Float getSetExternalCoreTemperature();

  @Optional
  void setSetExternalCoreTemperature(Float value) throws StatusException;

  @Optional
  AnalogItemType getSetHumidityNode();

  @Optional
  Integer getSetHumidity();

  @Optional
  void setSetHumidity(Integer value) throws StatusException;

  @Optional
  AnalogItemType getSetInternalCoreTemperatureNode();

  @Optional
  Float getSetInternalCoreTemperature();

  @Optional
  void setSetInternalCoreTemperature(Float value) throws StatusException;

  @Mandatory
  AnalogItemType getSetProcessTimeProgramNode();

  @Mandatory
  Integer getSetProcessTimeProgram();

  @Mandatory
  void setSetProcessTimeProgram(Integer value) throws StatusException;

  @Optional
  AnalogItemType getSetProcessTimeStepNode();

  @Optional
  Integer getSetProcessTimeStep();

  @Optional
  void setSetProcessTimeStep(Integer value) throws StatusException;

  @Mandatory
  AnalogItemType getSetTemperatureNode();

  @Mandatory
  Float getSetTemperature();

  @Mandatory
  void setSetTemperature(Float value) throws StatusException;

  @Optional
  BaseDataVariableType getSpecialCookingModeNode();

  @Optional
  SpecialCookingModeEnumeration getSpecialCookingMode();

  @Optional
  void setSpecialCookingMode(SpecialCookingModeEnumeration value) throws StatusException;

  @Mandatory
  AnalogItemType getTimeRemainingProgramNode();

  @Mandatory
  Integer getTimeRemainingProgram();

  @Mandatory
  void setTimeRemainingProgram(Integer value) throws StatusException;

  @Optional
  AnalogItemType getTimeRemainingStepNode();

  @Optional
  Integer getTimeRemainingStep();

  @Optional
  void setTimeRemainingStep(Integer value) throws StatusException;
}
