// Generated by Prosys OPC UA Java SDK Codegen
//
package com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.cke;

import com.prosysopc.ua.stack.builtintypes.ExpandedNodeId;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

/**
 * Generated on 2024-09-09 10:35:47
 */
class InternalCommercialKitchenEquipmentObjectTypeIdsHelper {
  public static final Set<ExpandedNodeId> ALL_OBJECTTYPE_IDENTIFIERS;

  static {
    Set<ExpandedNodeId> allIds = new HashSet<ExpandedNodeId>();
    allIds.add(CommercialKitchenEquipmentObjectTypeIds.BatchInformationType);
    allIds.add(CommercialKitchenEquipmentObjectTypeIds.KitchenDeviceHAConfigType);
    allIds.add(CommercialKitchenEquipmentObjectTypeIds.KitchenDeviceParameterType);
    allIds.add(CommercialKitchenEquipmentObjectTypeIds.ChamberType);
    allIds.add(CommercialKitchenEquipmentObjectTypeIds.CoffeeMachineParameterType);
    allIds.add(CommercialKitchenEquipmentObjectTypeIds.CoffeeMachineRecipeParameterType);
    allIds.add(CommercialKitchenEquipmentObjectTypeIds.CombiSteamerParameterType);
    allIds.add(CommercialKitchenEquipmentObjectTypeIds.CookingKettleParameterType);
    allIds.add(CommercialKitchenEquipmentObjectTypeIds.CookingZoneParameterType);
    allIds.add(CommercialKitchenEquipmentObjectTypeIds.DishWashingMachineProgramParameterType);
    allIds.add(CommercialKitchenEquipmentObjectTypeIds.FryerParameterType);
    allIds.add(CommercialKitchenEquipmentObjectTypeIds.FryingAndGrillingParameterType);
    allIds.add(CommercialKitchenEquipmentObjectTypeIds.FryingPanParameterType);
    allIds.add(CommercialKitchenEquipmentObjectTypeIds.IceMachineParameterType);
    allIds.add(CommercialKitchenEquipmentObjectTypeIds.MicrowaveCombiOvenParameterType);
    allIds.add(CommercialKitchenEquipmentObjectTypeIds.MultiFunctionPanParameterType);
    allIds.add(CommercialKitchenEquipmentObjectTypeIds.PastaCookerParameterType);
    allIds.add(CommercialKitchenEquipmentObjectTypeIds.PressureCookingKettleParameterType);
    allIds.add(CommercialKitchenEquipmentObjectTypeIds.TrayType);
    allIds.add(CommercialKitchenEquipmentObjectTypeIds.CommercialKitchenDeviceType);
    allIds.add(CommercialKitchenEquipmentObjectTypeIds.CoffeeMachineDeviceType);
    allIds.add(CommercialKitchenEquipmentObjectTypeIds.CombiSteamerDeviceType);
    allIds.add(CommercialKitchenEquipmentObjectTypeIds.CookingKettleDeviceType);
    allIds.add(CommercialKitchenEquipmentObjectTypeIds.CookingZoneDeviceType);
    allIds.add(CommercialKitchenEquipmentObjectTypeIds.DishWashingMachineDeviceType);
    allIds.add(CommercialKitchenEquipmentObjectTypeIds.FryerDeviceType);
    allIds.add(CommercialKitchenEquipmentObjectTypeIds.FryingAndGrillingDeviceType);
    allIds.add(CommercialKitchenEquipmentObjectTypeIds.FryingPanDeviceType);
    allIds.add(CommercialKitchenEquipmentObjectTypeIds.IceMachineDeviceType);
    allIds.add(CommercialKitchenEquipmentObjectTypeIds.MicrowaveCombiOvenDeviceType);
    allIds.add(CommercialKitchenEquipmentObjectTypeIds.MultiFunctionPanDeviceType);
    allIds.add(CommercialKitchenEquipmentObjectTypeIds.OvenDeviceType);
    allIds.add(CommercialKitchenEquipmentObjectTypeIds.PastaCookerDeviceType);
    allIds.add(CommercialKitchenEquipmentObjectTypeIds.PressureCookingKettleDeviceType);
    allIds.add(CommercialKitchenEquipmentObjectTypeIds.ServeryCounterDeviceType);
    ALL_OBJECTTYPE_IDENTIFIERS = Collections.unmodifiableSet(allIds);
  }
}
