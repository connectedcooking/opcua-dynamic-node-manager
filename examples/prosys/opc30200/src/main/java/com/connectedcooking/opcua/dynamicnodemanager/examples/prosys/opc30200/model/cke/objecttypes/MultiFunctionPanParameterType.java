// Generated by Prosys OPC UA Java SDK Codegen
//
package com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.cke.objecttypes;

import com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.cke.datatypes.MultiFunctionPanModeEnumeration;
import com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.cke.datatypes.SpecialFunctionModeEnumeration;
import com.prosysopc.ua.StatusException;
import com.prosysopc.ua.TypeDefinitionId;
import com.prosysopc.ua.nodes.Mandatory;
import com.prosysopc.ua.nodes.Optional;
import com.prosysopc.ua.types.opcua.AnalogItemType;
import com.prosysopc.ua.types.opcua.BaseDataVariableType;
import java.lang.Boolean;
import java.lang.Float;
import java.lang.Integer;
import java.lang.String;
import java.util.List;

/**
 * Generated on 2024-09-09 10:35:47
 */
@TypeDefinitionId("nsu=http://opcfoundation.org/UA/CommercialKitchenEquipment/;i=1018")
public interface MultiFunctionPanParameterType extends KitchenDeviceParameterType {
  String ACTUAL_CORE_TEMPERATURE = "ActualCoreTemperature";

  String ACTUAL_PRESSURE_ABSOLUTE = "ActualPressureAbsolute";

  String ACTUAL_TEMPERATURE_BOTTOM = "ActualTemperatureBottom";

  String ACTUAL_TEMPERATURE_CUP = "ActualTemperatureCup";

  String ACTUAL_ZONE_TEMPERATURE___NO__ = "ActualZoneTemperature_<No.>";

  String COOKING_LEVEL = "CookingLevel";

  String IS_LID_LOCKED = "IsLidLocked";

  String IS_LID_OPEN = "IsLidOpen";

  String IS_WITH_CLEANING = "IsWithCleaning";

  String IS_WITH_LIFT = "IsWithLift";

  String IS_WITH_PRESSURE = "IsWithPressure";

  String IS_WITH_TILTING = "IsWithTilting";

  String MULTI_FUNCTION_PAN_MODE = "MultiFunctionPanMode";

  String SET_CORE_TEMPERATURE = "SetCoreTemperature";

  String SET_PROCESS_TIME_PROGRAM = "SetProcessTimeProgram";

  String SET_PROCESS_TIME_STEP = "SetProcessTimeStep";

  String SET_TEMPERATURE = "SetTemperature";

  String SET_ZONE_TEMPERATURE___NO__ = "SetZoneTemperature_<No.>";

  String SPECIAL_FUNCTION_MODE = "SpecialFunctionMode";

  String TIME_REMAINING_PROGRAM = "TimeRemainingProgram";

  String TIME_REMAINING_STEP = "TimeRemainingStep";

  @Mandatory
  AnalogItemType getActualCoreTemperatureNode();

  @Mandatory
  Float getActualCoreTemperature();

  @Mandatory
  void setActualCoreTemperature(Float value) throws StatusException;

  @Optional
  AnalogItemType getActualPressureAbsoluteNode();

  @Optional
  Float getActualPressureAbsolute();

  @Optional
  void setActualPressureAbsolute(Float value) throws StatusException;

  @Mandatory
  AnalogItemType getActualTemperatureBottomNode();

  @Mandatory
  Float getActualTemperatureBottom();

  @Mandatory
  void setActualTemperatureBottom(Float value) throws StatusException;

  @Mandatory
  AnalogItemType getActualTemperatureCupNode();

  @Mandatory
  Float getActualTemperatureCup();

  @Mandatory
  void setActualTemperatureCup(Float value) throws StatusException;

  List<? extends AnalogItemType> getActualZoneTemperature__No__Nodes();

  @Optional
  BaseDataVariableType getCookingLevelNode();

  @Optional
  Integer getCookingLevel();

  @Optional
  void setCookingLevel(Integer value) throws StatusException;

  @Optional
  BaseDataVariableType getIsLidLockedNode();

  @Optional
  Boolean isIsLidLocked();

  @Optional
  void setIsLidLocked(Boolean value) throws StatusException;

  @Optional
  BaseDataVariableType getIsLidOpenNode();

  @Optional
  Boolean isIsLidOpen();

  @Optional
  void setIsLidOpen(Boolean value) throws StatusException;

  @Optional
  BaseDataVariableType getIsWithCleaningNode();

  @Optional
  Boolean isIsWithCleaning();

  @Optional
  void setIsWithCleaning(Boolean value) throws StatusException;

  @Optional
  BaseDataVariableType getIsWithLiftNode();

  @Optional
  Boolean isIsWithLift();

  @Optional
  void setIsWithLift(Boolean value) throws StatusException;

  @Optional
  BaseDataVariableType getIsWithPressureNode();

  @Optional
  Boolean isIsWithPressure();

  @Optional
  void setIsWithPressure(Boolean value) throws StatusException;

  @Optional
  BaseDataVariableType getIsWithTiltingNode();

  @Optional
  Boolean isIsWithTilting();

  @Optional
  void setIsWithTilting(Boolean value) throws StatusException;

  @Mandatory
  BaseDataVariableType getMultiFunctionPanModeNode();

  @Mandatory
  MultiFunctionPanModeEnumeration getMultiFunctionPanMode();

  @Mandatory
  void setMultiFunctionPanMode(MultiFunctionPanModeEnumeration value) throws StatusException;

  @Mandatory
  AnalogItemType getSetCoreTemperatureNode();

  @Mandatory
  Float getSetCoreTemperature();

  @Mandatory
  void setSetCoreTemperature(Float value) throws StatusException;

  @Mandatory
  AnalogItemType getSetProcessTimeProgramNode();

  @Mandatory
  Integer getSetProcessTimeProgram();

  @Mandatory
  void setSetProcessTimeProgram(Integer value) throws StatusException;

  @Optional
  AnalogItemType getSetProcessTimeStepNode();

  @Optional
  Integer getSetProcessTimeStep();

  @Optional
  void setSetProcessTimeStep(Integer value) throws StatusException;

  @Mandatory
  AnalogItemType getSetTemperatureNode();

  @Mandatory
  Float getSetTemperature();

  @Mandatory
  void setSetTemperature(Float value) throws StatusException;

  List<? extends AnalogItemType> getSetZoneTemperature__No__Nodes();

  @Optional
  BaseDataVariableType getSpecialFunctionModeNode();

  @Optional
  SpecialFunctionModeEnumeration getSpecialFunctionMode();

  @Optional
  void setSpecialFunctionMode(SpecialFunctionModeEnumeration value) throws StatusException;

  @Mandatory
  AnalogItemType getTimeRemainingProgramNode();

  @Mandatory
  Integer getTimeRemainingProgram();

  @Mandatory
  void setTimeRemainingProgram(Integer value) throws StatusException;

  @Optional
  AnalogItemType getTimeRemainingStepNode();

  @Optional
  Integer getTimeRemainingStep();

  @Optional
  void setTimeRemainingStep(Integer value) throws StatusException;
}
