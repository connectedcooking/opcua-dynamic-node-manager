// Generated by Prosys OPC UA Java SDK Codegen
//
package com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.cke.server;

import com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.cke.KitchenDeviceParameterType;
import com.prosysopc.ua.StatusException;
import com.prosysopc.ua.TypeDefinitionId;
import com.prosysopc.ua.nodes.Optional;
import com.prosysopc.ua.nodes.UaVariable;
import com.prosysopc.ua.server.GeneratedNodeInitializer;
import com.prosysopc.ua.server.NodeManagerUaNode;
import com.prosysopc.ua.server.ServiceContext;
import com.prosysopc.ua.stack.builtintypes.DiagnosticInfo;
import com.prosysopc.ua.stack.builtintypes.LocalizedText;
import com.prosysopc.ua.stack.builtintypes.NodeId;
import com.prosysopc.ua.stack.builtintypes.QualifiedName;
import com.prosysopc.ua.stack.builtintypes.StatusCode;
import com.prosysopc.ua.stack.builtintypes.Variant;
import com.prosysopc.ua.types.opcua.server.BaseDataVariableTypeNode;
import com.prosysopc.ua.types.opcua.server.BaseObjectTypeNode;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.RuntimeException;
import java.util.UUID;

/**
 * Generated on 2022-10-10 10:21:34
 */
@TypeDefinitionId("nsu=http://opcfoundation.org/UA/CommercialKitchenEquipment/;i=1004")
public abstract class KitchenDeviceParameterTypeNodeBase extends BaseObjectTypeNode implements KitchenDeviceParameterType {
  private static GeneratedNodeInitializer<KitchenDeviceParameterTypeNode> f_kitchenDeviceParameterTypeNodeInitializer;

  protected KitchenDeviceParameterTypeNodeBase(NodeManagerUaNode nodeManager, NodeId nodeId,
      QualifiedName browseName, LocalizedText displayName) {
    super(nodeManager, nodeId, browseName, displayName);
  }

  @Override
  public void afterCreate() {
    super.afterCreate();

    // Call afterCreate for each sub-node (if the node has any)
    callAfterCreateIfExists(getProgramIdNode());
    callAfterCreateIfExists(getProgramNameNode());
    callAfterCreateIfExists(getProgramUIdNode());
    GeneratedNodeInitializer<KitchenDeviceParameterTypeNode> impl = getKitchenDeviceParameterTypeNodeInitializer();
    if(impl != null) {
      impl.init((KitchenDeviceParameterTypeNode)this);
    }
  }

  public static GeneratedNodeInitializer<KitchenDeviceParameterTypeNode> getKitchenDeviceParameterTypeNodeInitializer() {
    return f_kitchenDeviceParameterTypeNodeInitializer;
  }

  public static void setKitchenDeviceParameterTypeNodeInitializer(GeneratedNodeInitializer<KitchenDeviceParameterTypeNode> f_kitchenDeviceParameterTypeNodeInitializerNewValue) {
    f_kitchenDeviceParameterTypeNodeInitializer=f_kitchenDeviceParameterTypeNodeInitializerNewValue;
  }

  @Optional
  @Override
  public BaseDataVariableTypeNode getProgramIdNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "ProgramId");
    return (BaseDataVariableTypeNode) getComponent(browseName);
  }

  @Optional
  @Override
  public Integer getProgramId() {
    UaVariable node = getProgramIdNode();
    if (node == null) {
      return null;
    }
    Object value = node.getValue().getValue().getValue();
    return (Integer) value;
  }

  @Optional
  @Override
  public void setProgramId(Integer value) {
    UaVariable node = getProgramIdNode();
    if (node == null) {
      throw new RuntimeException("Setting ProgramId failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting ProgramId failed unexpectedly", e);
    }
  }

  @Optional
  @Override
  public BaseDataVariableTypeNode getProgramNameNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "ProgramName");
    return (BaseDataVariableTypeNode) getComponent(browseName);
  }

  @Optional
  @Override
  public LocalizedText getProgramName() {
    UaVariable node = getProgramNameNode();
    if (node == null) {
      return null;
    }
    Object value = node.getValue().getValue().getValue();
    return (LocalizedText) value;
  }

  @Optional
  @Override
  public void setProgramName(LocalizedText value) {
    UaVariable node = getProgramNameNode();
    if (node == null) {
      throw new RuntimeException("Setting ProgramName failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting ProgramName failed unexpectedly", e);
    }
  }

  @Optional
  @Override
  public BaseDataVariableTypeNode getProgramUIdNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "ProgramUId");
    return (BaseDataVariableTypeNode) getComponent(browseName);
  }

  @Optional
  @Override
  public UUID getProgramUId() {
    UaVariable node = getProgramUIdNode();
    if (node == null) {
      return null;
    }
    Object value = node.getValue().getValue().getValue();
    return (UUID) value;
  }

  @Optional
  @Override
  public void setProgramUId(UUID value) {
    UaVariable node = getProgramUIdNode();
    if (node == null) {
      throw new RuntimeException("Setting ProgramUId failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting ProgramUId failed unexpectedly", e);
    }
  }

  @Override
  public Variant[] callMethod(ServiceContext serviceContext, NodeId methodId,
      Variant[] inputArguments, StatusCode[] inputArgumentResults,
      DiagnosticInfo[] inputArgumentDiagnosticInfos) throws StatusException {
    return super.callMethod(serviceContext, methodId, inputArguments, inputArgumentResults, inputArgumentDiagnosticInfos);
  }
}
