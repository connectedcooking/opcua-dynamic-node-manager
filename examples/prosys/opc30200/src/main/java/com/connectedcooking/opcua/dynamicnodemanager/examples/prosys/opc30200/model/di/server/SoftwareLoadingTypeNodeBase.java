// Generated by Prosys OPC UA Java SDK Codegen
//
package com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.di.server;

import com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.di.SoftwareLoadingType;
import com.prosysopc.ua.StatusException;
import com.prosysopc.ua.TypeDefinitionId;
import com.prosysopc.ua.nodes.Optional;
import com.prosysopc.ua.nodes.UaVariable;
import com.prosysopc.ua.server.GeneratedNodeInitializer;
import com.prosysopc.ua.server.NodeManagerUaNode;
import com.prosysopc.ua.server.ServiceContext;
import com.prosysopc.ua.stack.builtintypes.DiagnosticInfo;
import com.prosysopc.ua.stack.builtintypes.LocalizedText;
import com.prosysopc.ua.stack.builtintypes.NodeId;
import com.prosysopc.ua.stack.builtintypes.QualifiedName;
import com.prosysopc.ua.stack.builtintypes.StatusCode;
import com.prosysopc.ua.stack.builtintypes.Variant;
import com.prosysopc.ua.types.opcua.server.BaseDataVariableTypeNode;
import com.prosysopc.ua.types.opcua.server.BaseObjectTypeNode;
import java.lang.Object;
import java.lang.Override;
import java.lang.RuntimeException;
import java.lang.String;

/**
 * Generated on 2022-10-10 10:21:30
 */
@TypeDefinitionId("nsu=http://opcfoundation.org/UA/DI/;i=135")
public abstract class SoftwareLoadingTypeNodeBase extends BaseObjectTypeNode implements SoftwareLoadingType {
  private static GeneratedNodeInitializer<SoftwareLoadingTypeNode> f_softwareLoadingTypeNodeInitializer;

  protected SoftwareLoadingTypeNodeBase(NodeManagerUaNode nodeManager, NodeId nodeId,
      QualifiedName browseName, LocalizedText displayName) {
    super(nodeManager, nodeId, browseName, displayName);
  }

  @Override
  public void afterCreate() {
    super.afterCreate();

    // Call afterCreate for each sub-node (if the node has any)
    callAfterCreateIfExists(getUpdateKeyNode());
    GeneratedNodeInitializer<SoftwareLoadingTypeNode> impl = getSoftwareLoadingTypeNodeInitializer();
    if(impl != null) {
      impl.init((SoftwareLoadingTypeNode)this);
    }
  }

  public static GeneratedNodeInitializer<SoftwareLoadingTypeNode> getSoftwareLoadingTypeNodeInitializer() {
    return f_softwareLoadingTypeNodeInitializer;
  }

  public static void setSoftwareLoadingTypeNodeInitializer(GeneratedNodeInitializer<SoftwareLoadingTypeNode> f_softwareLoadingTypeNodeInitializerNewValue) {
    f_softwareLoadingTypeNodeInitializer=f_softwareLoadingTypeNodeInitializerNewValue;
  }

  @Optional
  @Override
  public BaseDataVariableTypeNode getUpdateKeyNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/DI/", "UpdateKey");
    return (BaseDataVariableTypeNode) getComponent(browseName);
  }

  @Optional
  @Override
  public String getUpdateKey() {
    UaVariable node = getUpdateKeyNode();
    if (node == null) {
      return null;
    }
    Object value = node.getValue().getValue().getValue();
    return (String) value;
  }

  @Optional
  @Override
  public void setUpdateKey(String value) {
    UaVariable node = getUpdateKeyNode();
    if (node == null) {
      throw new RuntimeException("Setting UpdateKey failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting UpdateKey failed unexpectedly", e);
    }
  }

  @Override
  public Variant[] callMethod(ServiceContext serviceContext, NodeId methodId,
      Variant[] inputArguments, StatusCode[] inputArgumentResults,
      DiagnosticInfo[] inputArgumentDiagnosticInfos) throws StatusException {
    return super.callMethod(serviceContext, methodId, inputArguments, inputArgumentResults, inputArgumentDiagnosticInfos);
  }
}
