// Generated by Prosys OPC UA Java SDK Codegen
//
package com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.cke.objecttypes.server;

import com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.cke.datatypes.EnergySourceEnumeration;
import com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.cke.objecttypes.FryerDeviceType;
import com.prosysopc.ua.StatusException;
import com.prosysopc.ua.TypeDefinitionId;
import com.prosysopc.ua.nodes.Mandatory;
import com.prosysopc.ua.nodes.UaNode;
import com.prosysopc.ua.nodes.UaProperty;
import com.prosysopc.ua.nodes.UaVariable;
import com.prosysopc.ua.server.GeneratedNodeInitializer;
import com.prosysopc.ua.server.ServiceContext;
import com.prosysopc.ua.stack.builtintypes.DiagnosticInfo;
import com.prosysopc.ua.stack.builtintypes.NodeId;
import com.prosysopc.ua.stack.builtintypes.QualifiedName;
import com.prosysopc.ua.stack.builtintypes.StatusCode;
import com.prosysopc.ua.stack.builtintypes.Variant;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.Override;
import java.lang.RuntimeException;

/**
 * Generated on 2024-09-09 10:35:47
 */
@TypeDefinitionId("nsu=http://opcfoundation.org/UA/CommercialKitchenEquipment/;i=1007")
public abstract class FryerDeviceTypeNodeBase extends CommercialKitchenDeviceTypeNode implements FryerDeviceType {
  private static GeneratedNodeInitializer<FryerDeviceTypeNode> f_fryerDeviceTypeNodeInitializer;

  protected FryerDeviceTypeNodeBase(UaNode.Parameters parameters) {
    super(parameters);
  }

  @Override
  public void afterCreate() {
    super.afterCreate();

    // Call afterCreate for each sub-node (if the node has any)
    GeneratedNodeInitializer<FryerDeviceTypeNode> impl = getFryerDeviceTypeNodeInitializer();
    if(impl != null) {
      impl.init((FryerDeviceTypeNode)this);
    }
  }

  public static GeneratedNodeInitializer<FryerDeviceTypeNode> getFryerDeviceTypeNodeInitializer() {
    return f_fryerDeviceTypeNodeInitializer;
  }

  public static void setFryerDeviceTypeNodeInitializer(GeneratedNodeInitializer<FryerDeviceTypeNode> f_fryerDeviceTypeNodeInitializerNewValue) {
    f_fryerDeviceTypeNodeInitializer=f_fryerDeviceTypeNodeInitializerNewValue;
  }

  @Mandatory
  @Override
  public UaProperty getEnergySourceNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "EnergySource");
    return getProperty(browseName);
  }

  @Mandatory
  @Override
  public EnergySourceEnumeration getEnergySource() {
    UaVariable node = getEnergySourceNode();
    if (node == null) {
      throw new RuntimeException("Mandatory node EnergySource does not exist");
    }
    Variant value = node.getValue().getValue();
    return (EnergySourceEnumeration) value.asEnum(EnergySourceEnumeration.class);
  }

  @Mandatory
  @Override
  public void setEnergySource(EnergySourceEnumeration value) {
    UaVariable node = getEnergySourceNode();
    if (node == null) {
      throw new RuntimeException("Setting EnergySource failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting EnergySource failed unexpectedly", e);
    }
  }

  @Mandatory
  @Override
  public UaProperty getIsWithLiftNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "IsWithLift");
    return getProperty(browseName);
  }

  @Mandatory
  @Override
  public Boolean isIsWithLift() {
    UaVariable node = getIsWithLiftNode();
    if (node == null) {
      throw new RuntimeException("Mandatory node IsWithLift does not exist");
    }
    Object value = node.getValue().getValue().getValue();
    return (Boolean) value;
  }

  @Mandatory
  @Override
  public void setIsWithLift(Boolean value) {
    UaVariable node = getIsWithLiftNode();
    if (node == null) {
      throw new RuntimeException("Setting IsWithLift failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting IsWithLift failed unexpectedly", e);
    }
  }

  @Override
  public Variant[] callMethod(ServiceContext serviceContext, NodeId methodId,
      Variant[] inputArguments, StatusCode[] inputArgumentResults,
      DiagnosticInfo[] inputArgumentDiagnosticInfos) throws StatusException {
    return super.callMethod(serviceContext, methodId, inputArguments, inputArgumentResults, inputArgumentDiagnosticInfos);
  }
}
