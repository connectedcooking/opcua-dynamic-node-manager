// Generated by Prosys OPC UA Java SDK Codegen
//
package com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.cke.datatypes;

import com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.cke.CommercialKitchenEquipmentUaIds;
import com.prosysopc.ua.InternalUaDataTypeSpecificationMappings;
import com.prosysopc.ua.TypeDefinitionId;
import com.prosysopc.ua.stack.builtintypes.Enumeration;
import com.prosysopc.ua.stack.builtintypes.UnsignedInteger;
import com.prosysopc.ua.typedictionary.EnumerationSpecification;
import java.lang.IllegalArgumentException;
import java.lang.Integer;
import java.lang.Override;
import java.util.ArrayList;
import java.util.Collection;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Generated on 2025-04-16 18:27:26
 */
@TypeDefinitionId("nsu=http://opcfoundation.org/UA/CommercialKitchenEquipment/;i=3005")
public enum FryingPanModeEnumeration implements Enumeration {
  Off(0),

  Preheat(1),

  SoftCook(2),

  Cook(3),

  CookSlow(4),

  Frying(5),

  PressureCooking(6),

  KeepWarming(7),

  PresetStart(8),

  Error(9);

  public static final EnumerationSpecification SPECIFICATION;

  public static final EnumSet<FryingPanModeEnumeration> NONE = EnumSet.noneOf(FryingPanModeEnumeration.class);

  public static final EnumSet<FryingPanModeEnumeration> ALL = EnumSet.allOf(FryingPanModeEnumeration.class);

  private static final Map<Integer, FryingPanModeEnumeration> map;

  static {
    map = new HashMap<Integer,FryingPanModeEnumeration>();
    for (FryingPanModeEnumeration i : FryingPanModeEnumeration.values()) {
      map.put(i.value, i);
    }
    EnumerationSpecification.Builder b = EnumerationSpecification.builder();
    b.setName("FryingPanModeEnumeration");
    b.setJavaClass(FryingPanModeEnumeration.class);
    b.setTypeId(CommercialKitchenEquipmentUaIds.FryingPanModeEnumeration);
    b.addMapping(0, "Off");
    b.addMapping(1, "Preheat");
    b.addMapping(2, "SoftCook");
    b.addMapping(3, "Cook");
    b.addMapping(4, "CookSlow");
    b.addMapping(5, "Frying");
    b.addMapping(6, "PressureCooking");
    b.addMapping(7, "KeepWarming");
    b.addMapping(8, "PresetStart");
    b.addMapping(9, "Error");
    b.setBuilderSupplier(new EnumerationSpecification.EnumerationBuilderSupplier() {
      @Override
      public Enumeration.Builder get() {
        return FryingPanModeEnumeration.builder();
      }
    });
    SPECIFICATION = b.build();
    InternalUaDataTypeSpecificationMappings.put(FryingPanModeEnumeration.class, SPECIFICATION);
  }

  private final int value;

  FryingPanModeEnumeration(int value) {
    this.value = value;
  }

  @Override
  public EnumerationSpecification specification() {
    return SPECIFICATION;
  }

  public static FryingPanModeEnumeration valueOf(int value) {
    return map.get(value);
  }

  public static FryingPanModeEnumeration valueOf(Integer value) {
    return value == null ? null : valueOf(value.intValue());
  }

  public static FryingPanModeEnumeration valueOf(UnsignedInteger value) {
    return value == null ? null : valueOf(value.intValue());
  }

  public static FryingPanModeEnumeration[] valueOf(int[] value) {
    FryingPanModeEnumeration[] result = new FryingPanModeEnumeration[value.length];
    for (int i = 0; i < value.length; i++) {
      result[i] = valueOf(value[i]);
    }
    return result;
  }

  public static FryingPanModeEnumeration[] valueOf(Integer[] value) {
    FryingPanModeEnumeration[] result = new FryingPanModeEnumeration[value.length];
    for (int i = 0; i < value.length; i++) {
      result[i] = valueOf(value[i]);
    }
    return result;
  }

  public static FryingPanModeEnumeration[] valueOf(UnsignedInteger[] value) {
    FryingPanModeEnumeration[] result = new FryingPanModeEnumeration[value.length];
    for (int i = 0; i < value.length; i++) {
      result[i] = valueOf(value[i]);
    }
    return result;
  }

  public static UnsignedInteger getMask(FryingPanModeEnumeration... list) {
    int result = 0;
    for (FryingPanModeEnumeration c : list) {
      result |= c.value;
    }
    return UnsignedInteger.getFromBits(result);
  }

  public static UnsignedInteger getMask(Collection<FryingPanModeEnumeration> list) {
    int result = 0;
    for (FryingPanModeEnumeration c : list) {
      result |= c.value;
    }
    return UnsignedInteger.getFromBits(result);
  }

  public static EnumSet<FryingPanModeEnumeration> getSet(UnsignedInteger mask) {
    return getSet(mask.intValue());
  }

  public static EnumSet<FryingPanModeEnumeration> getSet(int mask) {
    List<FryingPanModeEnumeration> res = new ArrayList<FryingPanModeEnumeration>();
    for (FryingPanModeEnumeration l : FryingPanModeEnumeration.values()) {
      if ((mask & l.value) == l.value) {
        res.add(l);
      }
    }
    return EnumSet.copyOf(res);
  }

  @Override
  public int getValue() {
    return value;
  }

  public static Builder builder() {
    return new Builder();
  }

  @Override
  public Builder toBuilder() {
    Builder b = builder();
    b.setValue(this.getValue());
    return b;
  }

  public static class Builder implements Enumeration.Builder {
    private FryingPanModeEnumeration value;

    private Builder() {
    }

    @Override
    public FryingPanModeEnumeration build() {
      return value;
    }

    @Override
    public Builder setValue(int value) {
      this.value=FryingPanModeEnumeration.valueOf(value);
      if (this.value == null) {
        throw new IllegalArgumentException("Unknown enum FryingPanModeEnumeration int value: " + value);
      }
      return this;
    }
  }
}
