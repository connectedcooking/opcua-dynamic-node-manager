// Generated by Prosys OPC UA Java SDK Codegen
//
package com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.di.objecttypes.server;

import com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.di.objecttypes.PrepareForUpdateStateMachineType;
import com.prosysopc.ua.StatusException;
import com.prosysopc.ua.TypeDefinitionId;
import com.prosysopc.ua.nodes.Mandatory;
import com.prosysopc.ua.nodes.Optional;
import com.prosysopc.ua.nodes.UaMethod;
import com.prosysopc.ua.nodes.UaNode;
import com.prosysopc.ua.nodes.UaVariable;
import com.prosysopc.ua.server.GeneratedNodeInitializer;
import com.prosysopc.ua.server.ServiceContext;
import com.prosysopc.ua.stack.builtintypes.DiagnosticInfo;
import com.prosysopc.ua.stack.builtintypes.NodeId;
import com.prosysopc.ua.stack.builtintypes.QualifiedName;
import com.prosysopc.ua.stack.builtintypes.StatusCode;
import com.prosysopc.ua.stack.builtintypes.UnsignedByte;
import com.prosysopc.ua.stack.builtintypes.Variant;
import com.prosysopc.ua.types.opcua.server.BaseDataVariableTypeNode;
import com.prosysopc.ua.types.opcua.server.FiniteStateMachineTypeNode;
import java.lang.Object;
import java.lang.Override;
import java.lang.RuntimeException;

/**
 * Generated on 2024-06-17 14:43:47
 */
@TypeDefinitionId("nsu=http://opcfoundation.org/UA/DI/;i=213")
public abstract class PrepareForUpdateStateMachineTypeNodeBase extends FiniteStateMachineTypeNode implements PrepareForUpdateStateMachineType {
  private static GeneratedNodeInitializer<PrepareForUpdateStateMachineTypeNode> f_prepareForUpdateStateMachineTypeNodeInitializer;

  private static PrepareForUpdateStateMachineTypePrepareMethod f_prepareMethodImplementation;

  private static PrepareForUpdateStateMachineTypeAbortMethod f_abortMethodImplementation;

  private static PrepareForUpdateStateMachineTypeResumeMethod f_resumeMethodImplementation;

  protected PrepareForUpdateStateMachineTypeNodeBase(UaNode.Parameters parameters) {
    super(parameters);
  }

  @Override
  public void afterCreate() {
    super.afterCreate();

    // Call afterCreate for each sub-node (if the node has any)
    callAfterCreateIfExists(getPercentCompleteNode());
    GeneratedNodeInitializer<PrepareForUpdateStateMachineTypeNode> impl = getPrepareForUpdateStateMachineTypeNodeInitializer();
    if(impl != null) {
      impl.init((PrepareForUpdateStateMachineTypeNode)this);
    }
  }

  public static GeneratedNodeInitializer<PrepareForUpdateStateMachineTypeNode> getPrepareForUpdateStateMachineTypeNodeInitializer() {
    return f_prepareForUpdateStateMachineTypeNodeInitializer;
  }

  public static void setPrepareForUpdateStateMachineTypeNodeInitializer(GeneratedNodeInitializer<PrepareForUpdateStateMachineTypeNode> f_prepareForUpdateStateMachineTypeNodeInitializerNewValue) {
    f_prepareForUpdateStateMachineTypeNodeInitializer=f_prepareForUpdateStateMachineTypeNodeInitializerNewValue;
  }

  @Optional
  @Override
  public BaseDataVariableTypeNode getPercentCompleteNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/DI/", "PercentComplete");
    return (BaseDataVariableTypeNode) getComponent(browseName);
  }

  @Optional
  @Override
  public UnsignedByte getPercentComplete() {
    UaVariable node = getPercentCompleteNode();
    if (node == null) {
      return null;
    }
    Object value = node.getValue().getValue().getValue();
    return (UnsignedByte) value;
  }

  @Optional
  @Override
  public void setPercentComplete(UnsignedByte value) {
    UaVariable node = getPercentCompleteNode();
    if (node == null) {
      throw new RuntimeException("Setting PercentComplete failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting PercentComplete failed unexpectedly", e);
    }
  }

  public void setPercentComplete(int value) {
    setPercentComplete(UnsignedByte.valueOf(value));
  }

  @Override
  public Variant[] callMethod(ServiceContext serviceContext, NodeId methodId,
      Variant[] inputArguments, StatusCode[] inputArgumentResults,
      DiagnosticInfo[] inputArgumentDiagnosticInfos) throws StatusException {
    if (isComponentMatch(getQualifiedName("http://opcfoundation.org/UA/DI/", "Prepare"), methodId)) {
      doPrepare(serviceContext);
      return null;
    }
    if (isComponentMatch(getQualifiedName("http://opcfoundation.org/UA/DI/", "Abort"), methodId)) {
      doAbort(serviceContext);
      return null;
    }
    if (isComponentMatch(getQualifiedName("http://opcfoundation.org/UA/DI/", "Resume"), methodId)) {
      doResume(serviceContext);
      return null;
    }
    return super.callMethod(serviceContext, methodId, inputArguments, inputArgumentResults, inputArgumentDiagnosticInfos);
  }

  @Mandatory
  @Override
  public UaMethod getPrepareNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/DI/", "Prepare");
    return (UaMethod) getComponent(browseName);
  }

  protected abstract void onPrepare(ServiceContext serviceContext) throws StatusException;

  @Override
  public void prepare() throws StatusException {
    doPrepare(ServiceContext.INTERNAL_OPERATION_CONTEXT);
  }

  private void doPrepare(ServiceContext serviceContext) throws StatusException {
    PrepareForUpdateStateMachineTypePrepareMethod impl = getPrepareMethodImplementation();
    if(impl != null) {
      impl.prepare(serviceContext, (PrepareForUpdateStateMachineTypeNode)this);
    } else {
      onPrepare(serviceContext);
    }
  }

  public static PrepareForUpdateStateMachineTypePrepareMethod getPrepareMethodImplementation() {
    return f_prepareMethodImplementation;
  }

  public static void setPrepareMethodImplementation(PrepareForUpdateStateMachineTypePrepareMethod f_prepareMethodImplementationNewValue) {
    f_prepareMethodImplementation=f_prepareMethodImplementationNewValue;
  }

  @Mandatory
  @Override
  public UaMethod getAbortNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/DI/", "Abort");
    return (UaMethod) getComponent(browseName);
  }

  protected abstract void onAbort(ServiceContext serviceContext) throws StatusException;

  @Override
  public void abort() throws StatusException {
    doAbort(ServiceContext.INTERNAL_OPERATION_CONTEXT);
  }

  private void doAbort(ServiceContext serviceContext) throws StatusException {
    PrepareForUpdateStateMachineTypeAbortMethod impl = getAbortMethodImplementation();
    if(impl != null) {
      impl.abort(serviceContext, (PrepareForUpdateStateMachineTypeNode)this);
    } else {
      onAbort(serviceContext);
    }
  }

  public static PrepareForUpdateStateMachineTypeAbortMethod getAbortMethodImplementation() {
    return f_abortMethodImplementation;
  }

  public static void setAbortMethodImplementation(PrepareForUpdateStateMachineTypeAbortMethod f_abortMethodImplementationNewValue) {
    f_abortMethodImplementation=f_abortMethodImplementationNewValue;
  }

  @Optional
  @Override
  public UaMethod getResumeNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/DI/", "Resume");
    return (UaMethod) getComponent(browseName);
  }

  protected abstract void onResume(ServiceContext serviceContext) throws StatusException;

  @Override
  public void resume() throws StatusException {
    doResume(ServiceContext.INTERNAL_OPERATION_CONTEXT);
  }

  private void doResume(ServiceContext serviceContext) throws StatusException {
    PrepareForUpdateStateMachineTypeResumeMethod impl = getResumeMethodImplementation();
    if(impl != null) {
      impl.resume(serviceContext, (PrepareForUpdateStateMachineTypeNode)this);
    } else {
      onResume(serviceContext);
    }
  }

  public static PrepareForUpdateStateMachineTypeResumeMethod getResumeMethodImplementation() {
    return f_resumeMethodImplementation;
  }

  public static void setResumeMethodImplementation(PrepareForUpdateStateMachineTypeResumeMethod f_resumeMethodImplementationNewValue) {
    f_resumeMethodImplementation=f_resumeMethodImplementationNewValue;
  }
}
