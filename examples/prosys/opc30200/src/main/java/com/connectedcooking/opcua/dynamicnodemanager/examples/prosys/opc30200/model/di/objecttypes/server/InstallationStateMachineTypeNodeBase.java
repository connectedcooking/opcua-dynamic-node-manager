// Generated by Prosys OPC UA Java SDK Codegen
//
package com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.di.objecttypes.server;

import com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.di.objecttypes.InstallationStateMachineType;
import com.prosysopc.ua.StatusException;
import com.prosysopc.ua.TypeDefinitionId;
import com.prosysopc.ua.nodes.Mandatory;
import com.prosysopc.ua.nodes.Optional;
import com.prosysopc.ua.nodes.UaMethod;
import com.prosysopc.ua.nodes.UaNode;
import com.prosysopc.ua.nodes.UaVariable;
import com.prosysopc.ua.server.GeneratedNodeInitializer;
import com.prosysopc.ua.server.ServiceContext;
import com.prosysopc.ua.stack.builtintypes.ByteString;
import com.prosysopc.ua.stack.builtintypes.DiagnosticInfo;
import com.prosysopc.ua.stack.builtintypes.NodeId;
import com.prosysopc.ua.stack.builtintypes.QualifiedName;
import com.prosysopc.ua.stack.builtintypes.StatusCode;
import com.prosysopc.ua.stack.builtintypes.UnsignedByte;
import com.prosysopc.ua.stack.builtintypes.Variant;
import com.prosysopc.ua.types.opcua.server.BaseDataVariableTypeNode;
import com.prosysopc.ua.types.opcua.server.FiniteStateMachineTypeNode;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.RuntimeException;
import java.lang.String;

/**
 * Generated on 2023-09-26 10:56:50
 */
@TypeDefinitionId("nsu=http://opcfoundation.org/UA/DI/;i=249")
public abstract class InstallationStateMachineTypeNodeBase extends FiniteStateMachineTypeNode implements InstallationStateMachineType {
  private static GeneratedNodeInitializer<InstallationStateMachineTypeNode> f_installationStateMachineTypeNodeInitializer;

  private static InstallationStateMachineTypeInstallSoftwarePackageMethod f_installSoftwarePackageMethodImplementation;

  private static InstallationStateMachineTypeInstallFilesMethod f_installFilesMethodImplementation;

  private static InstallationStateMachineTypeResumeMethod f_resumeMethodImplementation;

  protected InstallationStateMachineTypeNodeBase(UaNode.Parameters parameters) {
    super(parameters);
  }

  @Override
  public void afterCreate() {
    super.afterCreate();

    // Call afterCreate for each sub-node (if the node has any)
    callAfterCreateIfExists(getPercentCompleteNode());
    callAfterCreateIfExists(getInstallationDelayNode());
    GeneratedNodeInitializer<InstallationStateMachineTypeNode> impl = getInstallationStateMachineTypeNodeInitializer();
    if(impl != null) {
      impl.init((InstallationStateMachineTypeNode)this);
    }
  }

  public static GeneratedNodeInitializer<InstallationStateMachineTypeNode> getInstallationStateMachineTypeNodeInitializer() {
    return f_installationStateMachineTypeNodeInitializer;
  }

  public static void setInstallationStateMachineTypeNodeInitializer(GeneratedNodeInitializer<InstallationStateMachineTypeNode> f_installationStateMachineTypeNodeInitializerNewValue) {
    f_installationStateMachineTypeNodeInitializer=f_installationStateMachineTypeNodeInitializerNewValue;
  }

  @Optional
  @Override
  public BaseDataVariableTypeNode getPercentCompleteNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/DI/", "PercentComplete");
    return (BaseDataVariableTypeNode) getComponent(browseName);
  }

  @Optional
  @Override
  public UnsignedByte getPercentComplete() {
    UaVariable node = getPercentCompleteNode();
    if (node == null) {
      return null;
    }
    Object value = node.getValue().getValue().getValue();
    return (UnsignedByte) value;
  }

  @Optional
  @Override
  public void setPercentComplete(UnsignedByte value) {
    UaVariable node = getPercentCompleteNode();
    if (node == null) {
      throw new RuntimeException("Setting PercentComplete failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting PercentComplete failed unexpectedly", e);
    }
  }

  public void setPercentComplete(int value) {
    setPercentComplete(UnsignedByte.valueOf(value));
  }

  @Optional
  @Override
  public BaseDataVariableTypeNode getInstallationDelayNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/DI/", "InstallationDelay");
    return (BaseDataVariableTypeNode) getComponent(browseName);
  }

  @Optional
  @Override
  public Double getInstallationDelay() {
    UaVariable node = getInstallationDelayNode();
    if (node == null) {
      return null;
    }
    Object value = node.getValue().getValue().getValue();
    return (Double) value;
  }

  @Optional
  @Override
  public void setInstallationDelay(Double value) {
    UaVariable node = getInstallationDelayNode();
    if (node == null) {
      throw new RuntimeException("Setting InstallationDelay failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting InstallationDelay failed unexpectedly", e);
    }
  }

  @Override
  public Variant[] callMethod(ServiceContext serviceContext, NodeId methodId,
      Variant[] inputArguments, StatusCode[] inputArgumentResults,
      DiagnosticInfo[] inputArgumentDiagnosticInfos) throws StatusException {
    if (isComponentMatch(getQualifiedName("http://opcfoundation.org/UA/DI/", "InstallSoftwarePackage"), methodId)) {
      doInstallSoftwarePackage(serviceContext, (String) inputArguments[0].getValue(), (String) inputArguments[1].getValue(), (String[]) inputArguments[2].getValue(), (ByteString) inputArguments[3].getValue());
      return null;
    }
    if (isComponentMatch(getQualifiedName("http://opcfoundation.org/UA/DI/", "InstallFiles"), methodId)) {
      doInstallFiles(serviceContext, (NodeId[]) inputArguments[0].getValue());
      return null;
    }
    if (isComponentMatch(getQualifiedName("http://opcfoundation.org/UA/DI/", "Resume"), methodId)) {
      doResume(serviceContext);
      return null;
    }
    return super.callMethod(serviceContext, methodId, inputArguments, inputArgumentResults, inputArgumentDiagnosticInfos);
  }

  @Optional
  @Override
  public UaMethod getInstallSoftwarePackageNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/DI/", "InstallSoftwarePackage");
    return (UaMethod) getComponent(browseName);
  }

  protected abstract void onInstallSoftwarePackage(ServiceContext serviceContext,
      String f_manufacturerUri, String f_softwareRevision, String[] f_patchIdentifiers,
      ByteString f_hash) throws StatusException;

  @Override
  public void installSoftwarePackage(String f_manufacturerUri, String f_softwareRevision,
      String[] f_patchIdentifiers, ByteString f_hash) throws StatusException {
    doInstallSoftwarePackage(ServiceContext.INTERNAL_OPERATION_CONTEXT, f_manufacturerUri, f_softwareRevision, f_patchIdentifiers, f_hash);
  }

  private void doInstallSoftwarePackage(ServiceContext serviceContext, String f_manufacturerUri,
      String f_softwareRevision, String[] f_patchIdentifiers, ByteString f_hash) throws
      StatusException {
    InstallationStateMachineTypeInstallSoftwarePackageMethod impl = getInstallSoftwarePackageMethodImplementation();
    if(impl != null) {
      impl.installSoftwarePackage(serviceContext, (InstallationStateMachineTypeNode)this, f_manufacturerUri, f_softwareRevision, f_patchIdentifiers, f_hash);
    } else {
      onInstallSoftwarePackage(serviceContext, f_manufacturerUri, f_softwareRevision, f_patchIdentifiers, f_hash);
    }
  }

  public static InstallationStateMachineTypeInstallSoftwarePackageMethod getInstallSoftwarePackageMethodImplementation() {
    return f_installSoftwarePackageMethodImplementation;
  }

  public static void setInstallSoftwarePackageMethodImplementation(InstallationStateMachineTypeInstallSoftwarePackageMethod f_installSoftwarePackageMethodImplementationNewValue) {
    f_installSoftwarePackageMethodImplementation=f_installSoftwarePackageMethodImplementationNewValue;
  }

  @Optional
  @Override
  public UaMethod getInstallFilesNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/DI/", "InstallFiles");
    return (UaMethod) getComponent(browseName);
  }

  protected abstract void onInstallFiles(ServiceContext serviceContext, NodeId[] f_nodeIds) throws
      StatusException;

  @Override
  public void installFiles(NodeId[] f_nodeIds) throws StatusException {
    doInstallFiles(ServiceContext.INTERNAL_OPERATION_CONTEXT, f_nodeIds);
  }

  private void doInstallFiles(ServiceContext serviceContext, NodeId[] f_nodeIds) throws
      StatusException {
    InstallationStateMachineTypeInstallFilesMethod impl = getInstallFilesMethodImplementation();
    if(impl != null) {
      impl.installFiles(serviceContext, (InstallationStateMachineTypeNode)this, f_nodeIds);
    } else {
      onInstallFiles(serviceContext, f_nodeIds);
    }
  }

  public static InstallationStateMachineTypeInstallFilesMethod getInstallFilesMethodImplementation() {
    return f_installFilesMethodImplementation;
  }

  public static void setInstallFilesMethodImplementation(InstallationStateMachineTypeInstallFilesMethod f_installFilesMethodImplementationNewValue) {
    f_installFilesMethodImplementation=f_installFilesMethodImplementationNewValue;
  }

  @Mandatory
  @Override
  public UaMethod getResumeNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/DI/", "Resume");
    return (UaMethod) getComponent(browseName);
  }

  protected abstract void onResume(ServiceContext serviceContext) throws StatusException;

  @Override
  public void resume() throws StatusException {
    doResume(ServiceContext.INTERNAL_OPERATION_CONTEXT);
  }

  private void doResume(ServiceContext serviceContext) throws StatusException {
    InstallationStateMachineTypeResumeMethod impl = getResumeMethodImplementation();
    if(impl != null) {
      impl.resume(serviceContext, (InstallationStateMachineTypeNode)this);
    } else {
      onResume(serviceContext);
    }
  }

  public static InstallationStateMachineTypeResumeMethod getResumeMethodImplementation() {
    return f_resumeMethodImplementation;
  }

  public static void setResumeMethodImplementation(InstallationStateMachineTypeResumeMethod f_resumeMethodImplementationNewValue) {
    f_resumeMethodImplementation=f_resumeMethodImplementationNewValue;
  }
}
