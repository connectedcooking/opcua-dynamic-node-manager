// Generated by Prosys OPC UA Java SDK Codegen
//
package com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.cke.objecttypes.server;

import com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.cke.objecttypes.KitchenDeviceHAConfigType;
import com.prosysopc.ua.StatusException;
import com.prosysopc.ua.TypeDefinitionId;
import com.prosysopc.ua.nodes.Mandatory;
import com.prosysopc.ua.nodes.UaNode;
import com.prosysopc.ua.nodes.UaProperty;
import com.prosysopc.ua.nodes.UaVariable;
import com.prosysopc.ua.server.GeneratedNodeInitializer;
import com.prosysopc.ua.server.ServiceContext;
import com.prosysopc.ua.stack.builtintypes.DiagnosticInfo;
import com.prosysopc.ua.stack.builtintypes.NodeId;
import com.prosysopc.ua.stack.builtintypes.QualifiedName;
import com.prosysopc.ua.stack.builtintypes.StatusCode;
import com.prosysopc.ua.stack.builtintypes.Variant;
import com.prosysopc.ua.types.opcua.server.HistoricalDataConfigurationTypeNode;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.RuntimeException;

/**
 * Generated on 2024-09-09 10:35:47
 */
@TypeDefinitionId("nsu=http://opcfoundation.org/UA/CommercialKitchenEquipment/;i=1003")
public abstract class KitchenDeviceHAConfigTypeNodeBase extends HistoricalDataConfigurationTypeNode implements KitchenDeviceHAConfigType {
  private static GeneratedNodeInitializer<KitchenDeviceHAConfigTypeNode> f_kitchenDeviceHAConfigTypeNodeInitializer;

  protected KitchenDeviceHAConfigTypeNodeBase(UaNode.Parameters parameters) {
    super(parameters);
  }

  @Override
  public void afterCreate() {
    super.afterCreate();

    // Call afterCreate for each sub-node (if the node has any)
    GeneratedNodeInitializer<KitchenDeviceHAConfigTypeNode> impl = getKitchenDeviceHAConfigTypeNodeInitializer();
    if(impl != null) {
      impl.init((KitchenDeviceHAConfigTypeNode)this);
    }
  }

  public static GeneratedNodeInitializer<KitchenDeviceHAConfigTypeNode> getKitchenDeviceHAConfigTypeNodeInitializer() {
    return f_kitchenDeviceHAConfigTypeNodeInitializer;
  }

  public static void setKitchenDeviceHAConfigTypeNodeInitializer(GeneratedNodeInitializer<KitchenDeviceHAConfigTypeNode> f_kitchenDeviceHAConfigTypeNodeInitializerNewValue) {
    f_kitchenDeviceHAConfigTypeNodeInitializer=f_kitchenDeviceHAConfigTypeNodeInitializerNewValue;
  }

  @Mandatory
  @Override
  public UaProperty getHistoryDurationNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "HistoryDuration");
    return getProperty(browseName);
  }

  @Mandatory
  @Override
  public Double getHistoryDuration() {
    UaVariable node = getHistoryDurationNode();
    if (node == null) {
      throw new RuntimeException("Mandatory node HistoryDuration does not exist");
    }
    Object value = node.getValue().getValue().getValue();
    return (Double) value;
  }

  @Mandatory
  @Override
  public void setHistoryDuration(Double value) {
    UaVariable node = getHistoryDurationNode();
    if (node == null) {
      throw new RuntimeException("Setting HistoryDuration failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting HistoryDuration failed unexpectedly", e);
    }
  }

  @Mandatory
  @Override
  public UaProperty getSamplingIntervalNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/CommercialKitchenEquipment/", "SamplingInterval");
    return getProperty(browseName);
  }

  @Mandatory
  @Override
  public Double getSamplingInterval() {
    UaVariable node = getSamplingIntervalNode();
    if (node == null) {
      throw new RuntimeException("Mandatory node SamplingInterval does not exist");
    }
    Object value = node.getValue().getValue().getValue();
    return (Double) value;
  }

  @Mandatory
  @Override
  public void setSamplingInterval(Double value) {
    UaVariable node = getSamplingIntervalNode();
    if (node == null) {
      throw new RuntimeException("Setting SamplingInterval failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting SamplingInterval failed unexpectedly", e);
    }
  }

  @Override
  public Variant[] callMethod(ServiceContext serviceContext, NodeId methodId,
      Variant[] inputArguments, StatusCode[] inputArgumentResults,
      DiagnosticInfo[] inputArgumentDiagnosticInfos) throws StatusException {
    return super.callMethod(serviceContext, methodId, inputArguments, inputArgumentResults, inputArgumentDiagnosticInfos);
  }
}
