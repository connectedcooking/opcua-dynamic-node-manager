// Generated by Prosys OPC UA Java SDK Codegen
//
package com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.di.objecttypes.server;

import com.connectedcooking.opcua.dynamicnodemanager.examples.prosys.opc30200.model.di.objecttypes.SoftwareUpdateType;
import com.prosysopc.ua.StatusException;
import com.prosysopc.ua.TypeDefinitionId;
import com.prosysopc.ua.nodes.Optional;
import com.prosysopc.ua.nodes.UaNode;
import com.prosysopc.ua.nodes.UaVariable;
import com.prosysopc.ua.server.GeneratedNodeInitializer;
import com.prosysopc.ua.server.ServiceContext;
import com.prosysopc.ua.stack.builtintypes.DiagnosticInfo;
import com.prosysopc.ua.stack.builtintypes.LocalizedText;
import com.prosysopc.ua.stack.builtintypes.NodeId;
import com.prosysopc.ua.stack.builtintypes.QualifiedName;
import com.prosysopc.ua.stack.builtintypes.StatusCode;
import com.prosysopc.ua.stack.builtintypes.Variant;
import com.prosysopc.ua.types.opcua.server.BaseDataVariableTypeNode;
import com.prosysopc.ua.types.opcua.server.BaseObjectTypeNode;
import com.prosysopc.ua.types.opcua.server.TemporaryFileTransferTypeNode;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.RuntimeException;

/**
 * Generated on 2025-04-16 18:27:23
 */
@TypeDefinitionId("nsu=http://opcfoundation.org/UA/DI/;i=1")
public abstract class SoftwareUpdateTypeNodeBase extends BaseObjectTypeNode implements SoftwareUpdateType {
  private static GeneratedNodeInitializer<SoftwareUpdateTypeNode> f_softwareUpdateTypeNodeInitializer;

  protected SoftwareUpdateTypeNodeBase(Parameters parameters) {
    super(parameters);
  }

  @Override
  public void afterCreate() {
    super.afterCreate();

    // Call afterCreate for each sub-node (if the node has any)
    callAfterCreateIfExists(getUpdateStatusNode());
    callAfterCreateIfExists(getVendorErrorCodeNode());
    callAfterCreateIfExists(getLoadingNode());
    callAfterCreateIfExists(getPrepareForUpdateNode());
    callAfterCreateIfExists(getInstallationNode());
    callAfterCreateIfExists(getPowerCycleNode());
    callAfterCreateIfExists(getConfirmationNode());
    callAfterCreateIfExists(getParametersNode());
    GeneratedNodeInitializer<SoftwareUpdateTypeNode> impl = getSoftwareUpdateTypeNodeInitializer();
    if(impl != null) {
      impl.init((SoftwareUpdateTypeNode)this);
    }
  }

  public static GeneratedNodeInitializer<SoftwareUpdateTypeNode> getSoftwareUpdateTypeNodeInitializer() {
    return f_softwareUpdateTypeNodeInitializer;
  }

  public static void setSoftwareUpdateTypeNodeInitializer(GeneratedNodeInitializer<SoftwareUpdateTypeNode> f_softwareUpdateTypeNodeInitializerNewValue) {
    f_softwareUpdateTypeNodeInitializer=f_softwareUpdateTypeNodeInitializerNewValue;
  }

  @Optional
  @Override
  public BaseDataVariableTypeNode getUpdateStatusNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/DI/", "UpdateStatus");
    return (BaseDataVariableTypeNode) getComponent(browseName);
  }

  @Optional
  @Override
  public LocalizedText getUpdateStatus() {
    UaVariable node = getUpdateStatusNode();
    if (node == null) {
      return null;
    }
    Object value = node.getValue().getValue().getValue();
    return (LocalizedText) value;
  }

  @Optional
  @Override
  public void setUpdateStatus(LocalizedText value) {
    UaVariable node = getUpdateStatusNode();
    if (node == null) {
      throw new RuntimeException("Setting UpdateStatus failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting UpdateStatus failed unexpectedly", e);
    }
  }

  @Optional
  @Override
  public BaseDataVariableTypeNode getVendorErrorCodeNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/DI/", "VendorErrorCode");
    return (BaseDataVariableTypeNode) getComponent(browseName);
  }

  @Optional
  @Override
  public Integer getVendorErrorCode() {
    UaVariable node = getVendorErrorCodeNode();
    if (node == null) {
      return null;
    }
    Object value = node.getValue().getValue().getValue();
    return (Integer) value;
  }

  @Optional
  @Override
  public void setVendorErrorCode(Integer value) {
    UaVariable node = getVendorErrorCodeNode();
    if (node == null) {
      throw new RuntimeException("Setting VendorErrorCode failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
    }
    try {
      node.setValue(value);
    } catch(StatusException e) {
      throw new RuntimeException("Setting VendorErrorCode failed unexpectedly", e);
    }
  }

  @Optional
  @Override
  public SoftwareLoadingTypeNode getLoadingNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/DI/", "Loading");
    return (SoftwareLoadingTypeNode) getComponent(browseName);
  }

  @Optional
  @Override
  public PrepareForUpdateStateMachineTypeNode getPrepareForUpdateNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/DI/", "PrepareForUpdate");
    return (PrepareForUpdateStateMachineTypeNode) getComponent(browseName);
  }

  @Optional
  @Override
  public InstallationStateMachineTypeNode getInstallationNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/DI/", "Installation");
    return (InstallationStateMachineTypeNode) getComponent(browseName);
  }

  @Optional
  @Override
  public PowerCycleStateMachineTypeNode getPowerCycleNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/DI/", "PowerCycle");
    return (PowerCycleStateMachineTypeNode) getComponent(browseName);
  }

  @Optional
  @Override
  public ConfirmationStateMachineTypeNode getConfirmationNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/DI/", "Confirmation");
    return (ConfirmationStateMachineTypeNode) getComponent(browseName);
  }

  @Optional
  @Override
  public TemporaryFileTransferTypeNode getParametersNode() {
    QualifiedName browseName = getQualifiedName("http://opcfoundation.org/UA/DI/", "Parameters");
    return (TemporaryFileTransferTypeNode) getComponent(browseName);
  }

  @Override
  public Variant[] callMethod(ServiceContext serviceContext, NodeId methodId,
      Variant[] inputArguments, StatusCode[] inputArgumentResults,
      DiagnosticInfo[] inputArgumentDiagnosticInfos) throws StatusException {
    return super.callMethod(serviceContext, methodId, inputArguments, inputArgumentResults, inputArgumentDiagnosticInfos);
  }
}
